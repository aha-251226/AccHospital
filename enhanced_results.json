{
  "metadata": {
    "generation_timestamp": "2025-08-22 19:20:56",
    "total_sentences": 84,
    "methodology": "Enhanced Ultra Hybrid with Semantic Similarity and Penalty Normalization",
    "improvements": [
      "Integrated 1-4 stage data for better parameter extraction",
      "Semantic variable name and condition similarity in functional comparison",
      "Penalty and noise in AST/TED for normalization",
      "Fixed float32 serialization for JSON output"
    ]
  },
  "performance_summary": {
    "overall_metrics": {
      "valid_code_percentage": 100.0,
      "average_similarities": {
        "ast": 0.97,
        "ted": 0.97,
        "functional": 0.851,
        "overall": 0.93
      },
      "average_confidence": 0.74
    },
    "ast_distribution": {
      "perfect_98_plus": {
        "count": 24,
        "percentage": 28.6
      },
      "excellent_90_98": {
        "count": 60,
        "percentage": 71.4
      },
      "very_good_80_90": {
        "count": 0,
        "percentage": 0.0
      },
      "good_70_80": {
        "count": 0,
        "percentage": 0.0
      },
      "needs_improvement_below_70": {
        "count": 0,
        "percentage": 0.0
      }
    },
    "method_analysis": {
      "smart_copy": {
        "usage_count": 84,
        "success_rate": 1.0,
        "avg_score": 0.9303631343741837
      }
    }
  },
  "detailed_results": [
    {
      "sentence_id": 1,
      "sentence": "A single patient room shall have a handwashing facility.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.965,
        "ted": 0.988,
        "functional": 0.849
      },
      "is_valid": true,
      "processing_time": 0.547,
      "generated_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_equipment = ('handwashing facility', 'M_Sink - Work:510 mmx455 mm')\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            found = False\n            for equip in space.SELECT('containing element'):\n                if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                    name = equip.SELECT('name').STRING()\n                    equip.SUCCESS(f'The {target_space[0]} has {target_equipment[0]}: {name}')\n                    found = True\n            if not found:\n                space.ERROR(f'The {target_space[0]} does not have {target_equipment[0]}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_equipment = ('handwashing facility', 'M_Sink - Work:510 mmx455 mm')\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            found = False\n            for equip in space.SELECT('containing element'):\n                if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                    name = equip.SELECT('name').STRING()\n                    equip.SUCCESS(f'The {target_space[0]} has {target_equipment[0]}: {name}')\n                    found = True\n            if not found:\n                space.ERROR(f'The {target_space[0]} does not have {target_equipment[0]}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n      target_equipment = ('handwashing facility', 'M_Sink - Work:510 mmx455 mm')\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              found = False\n              for equip in space.SELECT('containing element'):\n                  if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                      name = equip.SELECT('name').STRING()\n                      equip.SUCCESS(f'The {target_space[0]} has {target_equipment[0]}: {name}')\n                      found = True\n              if not found:\n                  space.ERROR(f'The {target_space[0]} does not have {target_equipment[0]}.')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 2,
      "sentence": "A single patient room shall have a handwashing facility and a bed.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.967,
        "ted": 0.958,
        "functional": 0.845
      },
      "is_valid": true,
      "processing_time": 0.318,
      "generated_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_equipments = [\n        ('handwashing facility', 'M_Sink - Work:510 mmx455 mm'),\n        ('bed', 'Cama-Hospital:0813 x 2083 mm')\n    ]\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for equip_term, equip_family in target_equipments:\n                found = False\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(equip_family + ':'):\n                        name = equip.SELECT('name').STRING()\n                        equip.SUCCESS(f'The {target_space[0]} has {equip_term}: {name}')\n                        found = True\n                if not found:\n                    space.ERROR(f'The {target_space[0]} does not have {equip_term}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_equipments = [\n        ('handwashing facility', 'M_Sink - Work:510 mmx455 mm'),\n        ('bed', 'Cama-Hospital:0813 x 2083 mm')\n    ]\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for equip_term, equip_family in target_equipments:\n                found = False\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(equip_family + ':'):\n                        name = equip.SELECT('name').STRING()\n                        equip.SUCCESS(f'The {target_space[0]} has {equip_term}: {name}')\n                        found = True\n                if not found:\n                    space.ERROR(f'The {target_space[0]} does not have {equip_term}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n      target_equipments = [\n          ('handwashing facility', 'M_Sink - Work:510 mmx455 mm'),\n          ('bed', 'Cama-Hospital:0813 x 2083 mm')\n      ]\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              for equip_term, equip_family in target_equipments:\n                  found = False\n                  for equip in space.SELECT('containing element'):\n                      if equip.SELECT('name').STRING().startswith(equip_family + ':'):\n                          name = equip.SELECT('name').STRING()\n                          equip.SUCCESS(f'The {target_space[0]} has {equip_term}: {name}')\n                          found = True\n                  if not found:\n                      space.ERROR(f'The {target_space[0]} does not have {equip_term}.')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 3,
      "sentence": "If the area of a single patient room is 10 m² or larger, it shall have a handwashing facility.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.952,
        "ted": 0.958,
        "functional": 0.817
      },
      "is_valid": true,
      "processing_time": 0.313,
      "generated_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_equipment = ('handwashing facility', 'M_Sink - Work:510 mmx455 mm')\n    min_area = 10.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                found = False\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                        name = equip.SELECT('name').STRING()\n                        equip.SUCCESS(f'The {target_space[0]} has {target_equipment[0]}: {name}')\n                        found = True\n                if not found:\n                    space.ERROR(f'The {target_space[0]} does not have {target_equipment[0]}.')\n            else:\n                space.WARNING(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_equipment = ('handwashing facility', 'M_Sink - Work:510 mmx455 mm')\n    min_area = 10.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                found = False\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                        name = equip.SELECT('name').STRING()\n                        equip.SUCCESS(f'The {target_space[0]} has {target_equipment[0]}: {name}')\n                        found = True\n                if not found:\n                    space.ERROR(f'The {target_space[0]} does not have {target_equipment[0]}.')\n            else:\n                space.WARNING(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n      target_equipment = ('handwashing facility', 'M_Sink - Work:510 mmx455 mm')\n      min_area = 10.0\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area >= min_area:\n                  found = False\n                  for equip in space.SELECT('containing element'):\n                      if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                          name = equip.SELECT('name').STRING()\n                          equip.SUCCESS(f'The {target_space[0]} has {target_equipment[0]}: {name}')\n                          found = True\n                  if not found:\n                      space.ERROR(f'The {target_space[0]} does not have {target_equipment[0]}.')\n              else:\n                  space.WARNING(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 4,
      "sentence": "A staff lounge shall have a floor area of at least 9 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.982,
        "ted": 0.954,
        "functional": 0.86
      },
      "is_valid": true,
      "processing_time": 0.341,
      "generated_code": "def Check():\n    target_space = ('staff lounge', 'STAFF LOUNGE')\n    min_area = 9.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                space.SUCCESS(f'The {target_space[0]} is larger than {min_area}m²: {to_str(area)}m²')\n            else:\n                space.ERROR(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('staff lounge', 'STAFF LOUNGE')\n    min_area = 9.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                space.SUCCESS(f'The {target_space[0]} is larger than {min_area}m²: {to_str(area)}m²')\n            else:\n                space.ERROR(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('staff lounge', 'STAFF LOUNGE')\n      min_area = 9.0\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area >= min_area:\n                  space.SUCCESS(f'The {target_space[0]} is larger than {min_area}m²: {to_str(area)}m²')\n              else:\n                  space.ERROR(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 5,
      "sentence": "A staff lounge and an office shall each have a floor area of at least 9 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.987,
        "ted": 0.972,
        "functional": 0.853
      },
      "is_valid": true,
      "processing_time": 0.322,
      "generated_code": "def Check():\n    target_spaces = [\n        ('staff lounge', 'STAFF LOUNGE'),\n        ('office', 'OFFICE'),\n    ]\n    min_area = 9.0\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                area = space.SELECT('area').UNIT('m2').NUMBER()\n                if area >= min_area:\n                    space.SUCCESS(f'The {space_term} is larger than {min_area}m²: {to_str(area)}m²')\n                else:\n                    space.ERROR(f'The {space_term} is smaller than {min_area}m²: {to_str(area)}m²')\n                return\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_spaces = [\n        ('staff lounge', 'STAFF LOUNGE'),\n        ('office', 'OFFICE'),\n    ]\n    min_area = 9.0\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                area = space.SELECT('area').UNIT('m2').NUMBER()\n                if area >= min_area:\n                    space.SUCCESS(f'The {space_term} is larger than {min_area}m²: {to_str(area)}m²')\n                else:\n                    space.ERROR(f'The {space_term} is smaller than {min_area}m²: {to_str(area)}m²')\n                return\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('staff lounge', 'STAFF LOUNGE'),\n          ('office', 'OFFICE'),\n      ]\n      min_area = 9.0\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for space_term, space_model in target_spaces:\n              if space_name == space_model:\n                  area = space.SELECT('area').UNIT('m2').NUMBER()\n                  if area >= min_area:\n                      space.SUCCESS(f'The {space_term} is larger than {min_area}m²: {to_str(area)}m²')\n                  else:\n                      space.ERROR(f'The {space_term} is smaller than {min_area}m²: {to_str(area)}m²')\n                  return\n      for space_term, space_model in target_spaces:\n          if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n              ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 6,
      "sentence": "If the site area is 5,000 m² or larger, a staff lounge shall have a floor area of at least 9 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.989,
        "ted": 0.958,
        "functional": 0.852
      },
      "is_valid": true,
      "processing_time": 0.322,
      "generated_code": "def Check():\n    check_site = ('site', 'Toposolid:Site')\n    check_min_area = 5000.0\n    target_space = ('staff lounge', 'STAFF LOUNGE')\n    min_area = 9.0\n    for check in SELECT('proxy'):\n        if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space[1]:\n                        area = space.SELECT('area').UNIT('m2').NUMBER()\n                        if area >= min_area:\n                            space.SUCCESS(f'The {target_space[0]} is larger than {min_area}m²: {to_str(area)}m²')\n                        else:\n                            space.ERROR(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n                        return\n                ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'{check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    check_site = ('site', 'Toposolid:Site')\n    check_min_area = 5000.0\n    target_space = ('staff lounge', 'STAFF LOUNGE')\n    min_area = 9.0\n    for check in SELECT('proxy'):\n        if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space[1]:\n                        area = space.SELECT('area').UNIT('m2').NUMBER()\n                        if area >= min_area:\n                            space.SUCCESS(f'The {target_space[0]} is larger than {min_area}m²: {to_str(area)}m²')\n                        else:\n                            space.ERROR(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n                        return\n                ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'{check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      check_site = ('site', 'Toposolid:Site')\n      check_min_area = 5000.0\n      target_space = ('staff lounge', 'STAFF LOUNGE')\n      min_area = 9.0\n      for check in SELECT('proxy'):\n          if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n              area_check = check.SELECT('area').UNIT('m2').NUMBER()\n              if area_check >= check_min_area:\n                  for space in SELECT('space'):\n                      if space.SELECT('name').STRING() == target_space[1]:\n                          area = space.SELECT('area').UNIT('m2').NUMBER()\n                          if area >= min_area:\n                              space.SUCCESS(f'The {target_space[0]} is larger than {min_area}m²: {to_str(area)}m²')\n                          else:\n                              space.ERROR(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n                          return\n                  ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n              else:\n                  ROOT.WARNING(f'{check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n              return\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 7,
      "sentence": "The main parking lot shall have an area of at least 1000 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.98,
        "ted": 0.987,
        "functional": 0.864
      },
      "is_valid": true,
      "processing_time": 0.311,
      "generated_code": "def Check():\n    target_parking = ('main parking lot', 'MAIN PARKING LOT')\n    min_area = 1000.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_parking[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                space.SUCCESS(f'The {target_parking[0]} is larger than {min_area}m²: {to_str(area)}m²')\n            else:\n                space.ERROR(f'The {target_parking[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_parking[0]}({target_parking[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_parking = ('main parking lot', 'MAIN PARKING LOT')\n    min_area = 1000.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_parking[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                space.SUCCESS(f'The {target_parking[0]} is larger than {min_area}m²: {to_str(area)}m²')\n            else:\n                space.ERROR(f'The {target_parking[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_parking[0]}({target_parking[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_parking = ('main parking lot', 'MAIN PARKING LOT')\n      min_area = 1000.0\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_parking[1]:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area >= min_area:\n                  space.SUCCESS(f'The {target_parking[0]} is larger than {min_area}m²: {to_str(area)}m²')\n              else:\n                  space.ERROR(f'The {target_parking[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n              return\n      ROOT.WARNING(f'{target_parking[0]}({target_parking[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 8,
      "sentence": "Both the main parking lot and the emergency visitor parking area shall have an area of at least 100 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.973,
        "ted": 0.958,
        "functional": 0.849
      },
      "is_valid": true,
      "processing_time": 0.328,
      "generated_code": "def Check():\n    target_parkings = [\n        ('main parking lot', 'MAIN PARKING LOT'),\n        ('emergency visitor parking area', 'EMERGENCY VISITOR PARKING AREA')\n    ]\n    min_area = 100.0\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for parking_term, parking_model in target_parkings:\n            if space_name == parking_model:\n                area = space.SELECT('area').UNIT('m2').NUMBER()\n                if area >= min_area:\n                    space.SUCCESS(f'The {parking_term} is larger than {min_area}m²: {to_str(area)}m²')\n                else:\n                    space.ERROR(f'The {parking_term} is smaller than {min_area}m²: {to_str(area)}m²')\n    for parking_term, parking_model in target_parkings:\n        if not any(space.SELECT('name').STRING() == parking_model for space in SELECT('space')):\n            ROOT.WARNING(f'{parking_term}({parking_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_parkings = [\n        ('main parking lot', 'MAIN PARKING LOT'),\n        ('emergency visitor parking area', 'EMERGENCY VISITOR PARKING AREA')\n    ]\n    min_area = 100.0\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for parking_term, parking_model in target_parkings:\n            if space_name == parking_model:\n                area = space.SELECT('area').UNIT('m2').NUMBER()\n                if area >= min_area:\n                    space.SUCCESS(f'The {parking_term} is larger than {min_area}m²: {to_str(area)}m²')\n                else:\n                    space.ERROR(f'The {parking_term} is smaller than {min_area}m²: {to_str(area)}m²')\n    for parking_term, parking_model in target_parkings:\n        if not any(space.SELECT('name').STRING() == parking_model for space in SELECT('space')):\n            ROOT.WARNING(f'{parking_term}({parking_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_parkings = [\n          ('main parking lot', 'MAIN PARKING LOT'),\n          ('emergency visitor parking area', 'EMERGENCY VISITOR PARKING AREA')\n      ]\n      min_area = 100.0\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for parking_term, parking_model in target_parkings:\n              if space_name == parking_model:\n                  area = space.SELECT('area').UNIT('m2').NUMBER()\n                  if area >= min_area:\n                      space.SUCCESS(f'The {parking_term} is larger than {min_area}m²: {to_str(area)}m²')\n                  else:\n                      space.ERROR(f'The {parking_term} is smaller than {min_area}m²: {to_str(area)}m²')\n      for parking_term, parking_model in target_parkings:\n          if not any(space.SELECT('name').STRING() == parking_model for space in SELECT('space')):\n              ROOT.WARNING(f'{parking_term}({parking_model}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 9,
      "sentence": "If there is only one main parking lot, it shall have an area of at least 1,000 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.959,
        "ted": 0.974,
        "functional": 0.832
      },
      "is_valid": true,
      "processing_time": 0.341,
      "generated_code": "def Check():\n    target_parking = ('main parking lot', 'MAIN PARKING LOT')\n    min_area = 1000.0\n    target_count = 1\n    matched_parkings = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_parking[1]:\n            matched_parkings.append(space)\n    count = len(matched_parkings)\n    if count == target_count:\n        for space in matched_parkings:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                space.SUCCESS(f'The {target_parking[0]} is larger than {min_area}m²: {to_str(area)}m²')\n            else:\n                space.ERROR(f'The {target_parking[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n    else:\n        ROOT.WARNING(f'The number of {target_parking[0]} is not {target_count}: {count}')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_parking = ('main parking lot', 'MAIN PARKING LOT')\n    min_area = 1000.0\n    target_count = 1\n    matched_parkings = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_parking[1]:\n            matched_parkings.append(space)\n    count = len(matched_parkings)\n    if count == target_count:\n        for space in matched_parkings:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                space.SUCCESS(f'The {target_parking[0]} is larger than {min_area}m²: {to_str(area)}m²')\n            else:\n                space.ERROR(f'The {target_parking[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n    else:\n        ROOT.WARNING(f'The number of {target_parking[0]} is not {target_count}: {count}')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_parking = ('main parking lot', 'MAIN PARKING LOT')\n      min_area = 1000.0\n      target_count = 1\n      matched_parkings = []\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_parking[1]:\n              matched_parkings.append(space)\n      count = len(matched_parkings)\n      if count == target_count:\n          for space in matched_parkings:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area >= min_area:\n                  space.SUCCESS(f'The {target_parking[0]} is larger than {min_area}m²: {to_str(area)}m²')\n              else:\n                  space.ERROR(f'The {target_parking[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n      else:\n          ROOT.WARNING(f'The number of {target_parking[0]} is not {target_count}: {count}')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 10,
      "sentence": "The landscaped area shall be at least 500 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.97,
        "ted": 0.966,
        "functional": 0.862
      },
      "is_valid": true,
      "processing_time": 0.311,
      "generated_code": "def Check():\n    target_landscape = ('landscaped area', 'LANDSCAPED AREA')\n    min_area = 500.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_landscape[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                space.SUCCESS(f'The {target_landscape[0]} is larger than {min_area}m²: {to_str(area)}m²')\n            else:\n                space.ERROR(f'The {target_landscape[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_landscape[0]}({target_landscape[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_landscape = ('landscaped area', 'LANDSCAPED AREA')\n    min_area = 500.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_landscape[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                space.SUCCESS(f'The {target_landscape[0]} is larger than {min_area}m²: {to_str(area)}m²')\n            else:\n                space.ERROR(f'The {target_landscape[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_landscape[0]}({target_landscape[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_landscape = ('landscaped area', 'LANDSCAPED AREA')\n      min_area = 500.0\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_landscape[1]:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area >= min_area:\n                  space.SUCCESS(f'The {target_landscape[0]} is larger than {min_area}m²: {to_str(area)}m²')\n              else:\n                  space.ERROR(f'The {target_landscape[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n              return\n      ROOT.WARNING(f'{target_landscape[0]}({target_landscape[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 11,
      "sentence": "Both the landscaped area and the rooftop landscaped area shall be at least 10 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.985,
        "ted": 0.981,
        "functional": 0.847
      },
      "is_valid": true,
      "processing_time": 0.311,
      "generated_code": "def Check():\n    target_landscapes = [\n        ('landscaped area', 'LANDSCAPED AREA'),\n        ('rooftop landscaped area', 'ROOFTOP LANDSCAPED AREA')\n    ]\n    min_area = 10.0\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for landscape_term, landscape_model in target_landscapes:\n            if space_name == landscape_model:\n                area = space.SELECT('area').UNIT('m2').NUMBER()\n                if area >= min_area:\n                    space.SUCCESS(f'The {landscape_term} is larger than {min_area}m²: {to_str(area)}m²')\n                else:\n                    space.ERROR(f'The {landscape_term} is smaller than {min_area}m²: {to_str(area)}m²')\n    for landscape_term, landscape_model in target_landscapes:\n        if not any(space.SELECT('name').STRING() == landscape_model for space in SELECT('space')):\n            ROOT.WARNING(f'{landscape_term}({landscape_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_landscapes = [\n        ('landscaped area', 'LANDSCAPED AREA'),\n        ('rooftop landscaped area', 'ROOFTOP LANDSCAPED AREA')\n    ]\n    min_area = 10.0\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for landscape_term, landscape_model in target_landscapes:\n            if space_name == landscape_model:\n                area = space.SELECT('area').UNIT('m2').NUMBER()\n                if area >= min_area:\n                    space.SUCCESS(f'The {landscape_term} is larger than {min_area}m²: {to_str(area)}m²')\n                else:\n                    space.ERROR(f'The {landscape_term} is smaller than {min_area}m²: {to_str(area)}m²')\n    for landscape_term, landscape_model in target_landscapes:\n        if not any(space.SELECT('name').STRING() == landscape_model for space in SELECT('space')):\n            ROOT.WARNING(f'{landscape_term}({landscape_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_landscapes = [\n          ('landscaped area', 'LANDSCAPED AREA'),\n          ('rooftop landscaped area', 'ROOFTOP LANDSCAPED AREA')\n      ]\n      min_area = 10.0\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for landscape_term, landscape_model in target_landscapes:\n              if space_name == landscape_model:\n                  area = space.SELECT('area').UNIT('m2').NUMBER()\n                  if area >= min_area:\n                      space.SUCCESS(f'The {landscape_term} is larger than {min_area}m²: {to_str(area)}m²')\n                  else:\n                      space.ERROR(f'The {landscape_term} is smaller than {min_area}m²: {to_str(area)}m²')\n      for landscape_term, landscape_model in target_landscapes:\n          if not any(space.SELECT('name').STRING() == landscape_model for space in SELECT('space')):\n              ROOT.WARNING(f'{landscape_term}({landscape_model}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 12,
      "sentence": "If the site area is 5,000 m² or larger, the landscaped area shall be at least 500 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.954,
        "ted": 0.96,
        "functional": 0.833
      },
      "is_valid": true,
      "processing_time": 0.321,
      "generated_code": "def Check():\n    site_entity = ('site', 'Toposolid:Site')\n    site_min_area = 5000.0\n    landscape_entity = ('landscaped area', 'LANDSCAPED AREA')\n    landscape_min_area = 500.0\n    site_found = False\n    site_meets_condition = False\n    # Check site area first\n    for proxy in SELECT('proxy'):\n        proxy_name = proxy.SELECT('name').STRING()\n        if proxy_name.startswith(site_entity[1]):\n            site_found = True\n            site_area = proxy.SELECT('area').UNIT('m2').NUMBER()\n            if site_area >= site_min_area:\n                site_meets_condition = True\n                proxy.SUCCESS(f'Site area meets condition: {to_str(site_area)}m² >= {site_min_area}m²')\n                # Check landscaped area\n                landscape_found = False\n                for space in SELECT('space'):\n                    space_name = space.SELECT('name').STRING()\n                    if space_name == landscape_entity[1]:\n                        landscape_found = True\n                        landscape_area = space.SELECT('area').UNIT('m2').NUMBER()\n                        if landscape_area >= landscape_min_area:\n                            space.SUCCESS(f'Landscaped area compliant: {to_str(landscape_area)}m² >= {landscape_min_area}m²')\n                        else:\n                            space.ERROR(f'Landscaped area insufficient: {to_str(landscape_area)}m² < {landscape_min_area}m²')\n                        break\n                if not landscape_found:\n                    ROOT.ERROR(f'{landscape_entity[0]}({landscape_entity[1]}) NOT FOUND')\n            else:\n                proxy.SUCCESS(f'Site area below threshold - rule not applicable: {to_str(site_area)}m² < {site_min_area}m²')\n            break\n    if not site_found:\n        ROOT.WARNING(f'{site_entity[0]}({site_entity[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    site_entity = ('site', 'Toposolid:Site')\n    site_min_area = 5000.0\n    landscape_entity = ('landscaped area', 'LANDSCAPED AREA')\n    landscape_min_area = 500.0\n    site_found = False\n    site_meets_condition = False\n    # Check site area first\n    for proxy in SELECT('proxy'):\n        proxy_name = proxy.SELECT('name').STRING()\n        if proxy_name.startswith(site_entity[1]):\n            site_found = True\n            site_area = proxy.SELECT('area').UNIT('m2').NUMBER()\n            if site_area >= site_min_area:\n                site_meets_condition = True\n                proxy.SUCCESS(f'Site area meets condition: {to_str(site_area)}m² >= {site_min_area}m²')\n                # Check landscaped area\n                landscape_found = False\n                for space in SELECT('space'):\n                    space_name = space.SELECT('name').STRING()\n                    if space_name == landscape_entity[1]:\n                        landscape_found = True\n                        landscape_area = space.SELECT('area').UNIT('m2').NUMBER()\n                        if landscape_area >= landscape_min_area:\n                            space.SUCCESS(f'Landscaped area compliant: {to_str(landscape_area)}m² >= {landscape_min_area}m²')\n                        else:\n                            space.ERROR(f'Landscaped area insufficient: {to_str(landscape_area)}m² < {landscape_min_area}m²')\n                        break\n                if not landscape_found:\n                    ROOT.ERROR(f'{landscape_entity[0]}({landscape_entity[1]}) NOT FOUND')\n            else:\n                proxy.SUCCESS(f'Site area below threshold - rule not applicable: {to_str(site_area)}m² < {site_min_area}m²')\n            break\n    if not site_found:\n        ROOT.WARNING(f'{site_entity[0]}({site_entity[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      site_entity = ('site', 'Toposolid:Site')\n      site_min_area = 5000.0\n      landscape_entity = ('landscaped area', 'LANDSCAPED AREA')\n      landscape_min_area = 500.0\n      site_found = False\n      site_meets_condition = False\n      # Check site area first\n      for proxy in SELECT('proxy'):\n          proxy_name = proxy.SELECT('name').STRING()\n          if proxy_name.startswith(site_entity[1]):\n              site_found = True\n              site_area = proxy.SELECT('area').UNIT('m2').NUMBER()\n              if site_area >= site_min_area:\n                  site_meets_condition = True\n                  proxy.SUCCESS(f'Site area meets condition: {to_str(site_area)}m² >= {site_min_area}m²')\n                  # Check landscaped area\n                  landscape_found = False\n                  for space in SELECT('space'):\n                      space_name = space.SELECT('name').STRING()\n                      if space_name == landscape_entity[1]:\n                          landscape_found = True\n                          landscape_area = space.SELECT('area').UNIT('m2').NUMBER()\n                          if landscape_area >= landscape_min_area:\n                              space.SUCCESS(f'Landscaped area compliant: {to_str(landscape_area)}m² >= {landscape_min_area}m²')\n                          else:\n                              space.ERROR(f'Landscaped area insufficient: {to_str(landscape_area)}m² < {landscape_min_area}m²')\n                          break\n                  if not landscape_found:\n                      ROOT.ERROR(f'{landscape_entity[0]}({landscape_entity[1]}) NOT FOUND')\n              else:\n                  proxy.SUCCESS(f'Site area below threshold - rule not applicable: {to_str(site_area)}m² < {site_min_area}m²')\n              break\n      if not site_found:\n          ROOT.WARNING(f'{site_entity[0]}({site_entity[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 13,
      "sentence": "The site area of a hospital shall be at least 5000 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.972,
        "ted": 0.965,
        "functional": 0.855
      },
      "is_valid": true,
      "processing_time": 0.311,
      "generated_code": "def Check():\n    target_site = ('site', 'Toposolid:Site')\n    min_area = 5000.0\n    for site in SELECT('proxy'):\n        if site.SELECT('name').STRING().startswith(target_site[1]+':'):\n            area = site.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                site.SUCCESS(f'The {target_site[0]} is larger than {min_area}m²: {to_str(area)}m²')\n            else:\n                site.ERROR(f'The {target_site[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_site[0]}({target_site[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_site = ('site', 'Toposolid:Site')\n    min_area = 5000.0\n    for site in SELECT('proxy'):\n        if site.SELECT('name').STRING().startswith(target_site[1]+':'):\n            area = site.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                site.SUCCESS(f'The {target_site[0]} is larger than {min_area}m²: {to_str(area)}m²')\n            else:\n                site.ERROR(f'The {target_site[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_site[0]}({target_site[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_site = ('site', 'Toposolid:Site')\n      min_area = 5000.0\n      for site in SELECT('proxy'):\n          if site.SELECT('name').STRING().startswith(target_site[1]+':'):\n              area = site.SELECT('area').UNIT('m2').NUMBER()\n              if area >= min_area:\n                  site.SUCCESS(f'The {target_site[0]} is larger than {min_area}m²: {to_str(area)}m²')\n              else:\n                  site.ERROR(f'The {target_site[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n              return\n      ROOT.WARNING(f'{target_site[0]}({target_site[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 14,
      "sentence": "The site area of a hospital shall be at least 5000 m², and the area of the extra site shall be at least 500 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.964,
        "ted": 0.985,
        "functional": 0.826
      },
      "is_valid": true,
      "processing_time": 0.331,
      "generated_code": "def Check():\n    target_sites = [\n        ('site', 'Toposolid:Site'),\n        ('extra site', 'Toposolid:Extra_Site')\n    ]\n    min_areas = [5000.0, 500.0]\n    for (site_term, site_model), min_area in zip(target_sites, min_areas):\n        found = False\n        for site in SELECT('proxy'):\n            if site.SELECT('name').STRING().startswith(site_model+':'):\n                found = True\n                area = site.SELECT('area').UNIT('m2').NUMBER()\n                if area >= min_area:\n                    site.SUCCESS(f'The {site_term} is larger than {min_area}m²: {to_str(area)}m²')\n                else:\n                    site.ERROR(f'The {site_term} is smaller than {min_area}m²: {to_str(area)}m²')\n                break\n        if not found:\n            ROOT.WARNING(f'{site_term}({site_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_sites = [\n        ('site', 'Toposolid:Site'),\n        ('extra site', 'Toposolid:Extra_Site')\n    ]\n    min_areas = [5000.0, 500.0]\n    for (site_term, site_model), min_area in zip(target_sites, min_areas):\n        found = False\n        for site in SELECT('proxy'):\n            if site.SELECT('name').STRING().startswith(site_model+':'):\n                found = True\n                area = site.SELECT('area').UNIT('m2').NUMBER()\n                if area >= min_area:\n                    site.SUCCESS(f'The {site_term} is larger than {min_area}m²: {to_str(area)}m²')\n                else:\n                    site.ERROR(f'The {site_term} is smaller than {min_area}m²: {to_str(area)}m²')\n                break\n        if not found:\n            ROOT.WARNING(f'{site_term}({site_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_sites = [\n          ('site', 'Toposolid:Site'),\n          ('extra site', 'Toposolid:Extra_Site')\n      ]\n      min_areas = [5000.0, 500.0]\n      for (site_term, site_model), min_area in zip(target_sites, min_areas):\n          found = False\n          for site in SELECT('proxy'):\n              if site.SELECT('name').STRING().startswith(site_model+':'):\n                  found = True\n                  area = site.SELECT('area').UNIT('m2').NUMBER()\n                  if area >= min_area:\n                      site.SUCCESS(f'The {site_term} is larger than {min_area}m²: {to_str(area)}m²')\n                  else:\n                      site.ERROR(f'The {site_term} is smaller than {min_area}m²: {to_str(area)}m²')\n                  break\n          if not found:\n              ROOT.WARNING(f'{site_term}({site_model}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 15,
      "sentence": "If there is an emergency department, the site area of a hospital shall be at least 5000 m².",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.968,
        "ted": 0.97,
        "functional": 0.841
      },
      "is_valid": true,
      "processing_time": 0.315,
      "generated_code": "def Check():\n    check_space = ('emergency department', 'Emergency Department')\n    target_site = ('site', 'Toposolid:Site')\n    min_area = 5000.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == check_space[1]:\n            for site in SELECT('proxy'):\n                if site.SELECT('name').STRING().startswith(target_site[1]+':'):\n                    area = site.SELECT('area').UNIT('m2').NUMBER()\n                    if area >= min_area:\n                        site.SUCCESS(f'The {target_site[0]} is larger than {min_area}m²: {to_str(area)}m²')\n                    else:\n                        site.ERROR(f'The {target_site[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n                    return\n                else:\n                    ROOT.WARNING(f'{target_site[0]}({target_site[1]}) NOT FOUND')\n                return\n    ROOT.WARNING(f'{check_space[0]}({check_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    check_space = ('emergency department', 'Emergency Department')\n    target_site = ('site', 'Toposolid:Site')\n    min_area = 5000.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == check_space[1]:\n            for site in SELECT('proxy'):\n                if site.SELECT('name').STRING().startswith(target_site[1]+':'):\n                    area = site.SELECT('area').UNIT('m2').NUMBER()\n                    if area >= min_area:\n                        site.SUCCESS(f'The {target_site[0]} is larger than {min_area}m²: {to_str(area)}m²')\n                    else:\n                        site.ERROR(f'The {target_site[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n                    return\n                else:\n                    ROOT.WARNING(f'{target_site[0]}({target_site[1]}) NOT FOUND')\n                return\n    ROOT.WARNING(f'{check_space[0]}({check_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      check_space = ('emergency department', 'Emergency Department')\n      target_site = ('site', 'Toposolid:Site')\n      min_area = 5000.0\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == check_space[1]:\n              for site in SELECT('proxy'):\n                  if site.SELECT('name').STRING().startswith(target_site[1]+':'):\n                      area = site.SELECT('area').UNIT('m2').NUMBER()\n                      if area >= min_area:\n                          site.SUCCESS(f'The {target_site[0]} is larger than {min_area}m²: {to_str(area)}m²')\n                      else:\n                          site.ERROR(f'The {target_site[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n                      return\n                  else:\n                      ROOT.WARNING(f'{target_site[0]}({target_site[1]}) NOT FOUND')\n                  return\n      ROOT.WARNING(f'{check_space[0]}({check_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 16,
      "sentence": "The ceiling height of a corridor shall be at least 2.29 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.985,
        "ted": 0.96,
        "functional": 0.864
      },
      "is_valid": true,
      "processing_time": 0.313,
      "generated_code": "def Check():\n    target_space = ('corridor', 'CORRIDOR')\n    min_height = 2.29\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            height = space.SELECT('height').UNIT('m').NUMBER()\n            if height >= min_height:\n                space.SUCCESS(f'The ceiling height of {target_space[0]} is at least {min_height}m: {to_str(height)}m')\n            else:\n                space.ERROR(f'The ceiling height of {target_space[0]} is less than {min_height}m: {to_str(height)}m')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('corridor', 'CORRIDOR')\n    min_height = 2.29\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            height = space.SELECT('height').UNIT('m').NUMBER()\n            if height >= min_height:\n                space.SUCCESS(f'The ceiling height of {target_space[0]} is at least {min_height}m: {to_str(height)}m')\n            else:\n                space.ERROR(f'The ceiling height of {target_space[0]} is less than {min_height}m: {to_str(height)}m')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('corridor', 'CORRIDOR')\n      min_height = 2.29\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              height = space.SELECT('height').UNIT('m').NUMBER()\n              if height >= min_height:\n                  space.SUCCESS(f'The ceiling height of {target_space[0]} is at least {min_height}m: {to_str(height)}m')\n              else:\n                  space.ERROR(f'The ceiling height of {target_space[0]} is less than {min_height}m: {to_str(height)}m')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 17,
      "sentence": "The ceiling height of both a corridor and a lobby shall be at least 2.29 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.964,
        "ted": 0.976,
        "functional": 0.854
      },
      "is_valid": true,
      "processing_time": 0.32,
      "generated_code": "def Check():\n    target_spaces = [\n        ('corridor', 'CORRIDOR'),\n        ('lobby', 'LOBBY'),\n    ]\n    min_height = 2.29\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                height = space.SELECT('height').UNIT('m').NUMBER()\n                if height >= min_height:\n                    space.SUCCESS(f'The ceiling height of {space_term} is at least {min_height}m: {to_str(height)}m')\n                else:\n                    space.ERROR(f'The ceiling height of {space_term} is less than {min_height}m: {to_str(height)}m')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_spaces = [\n        ('corridor', 'CORRIDOR'),\n        ('lobby', 'LOBBY'),\n    ]\n    min_height = 2.29\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                height = space.SELECT('height').UNIT('m').NUMBER()\n                if height >= min_height:\n                    space.SUCCESS(f'The ceiling height of {space_term} is at least {min_height}m: {to_str(height)}m')\n                else:\n                    space.ERROR(f'The ceiling height of {space_term} is less than {min_height}m: {to_str(height)}m')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('corridor', 'CORRIDOR'),\n          ('lobby', 'LOBBY'),\n      ]\n      min_height = 2.29\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for space_term, space_model in target_spaces:\n              if space_name == space_model:\n                  height = space.SELECT('height').UNIT('m').NUMBER()\n                  if height >= min_height:\n                      space.SUCCESS(f'The ceiling height of {space_term} is at least {min_height}m: {to_str(height)}m')\n                  else:\n                      space.ERROR(f'The ceiling height of {space_term} is less than {min_height}m: {to_str(height)}m')\n      for space_term, space_model in target_spaces:\n          if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n              ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 18,
      "sentence": "If the area of a corridor is 200 m² or less, the ceiling height shall be at least 2.29 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.957,
        "ted": 0.957,
        "functional": 0.841
      },
      "is_valid": true,
      "processing_time": 0.336,
      "generated_code": "def Check():\n    target_space = ('corridor', 'CORRIDOR')\n    max_area = 200.0\n    min_height = 2.29\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area <= max_area:\n                height = space.SELECT('height').UNIT('m').NUMBER()\n                if height >= min_height:\n                    space.SUCCESS(f'The ceiling height of {target_space[0]} is at least {min_height}m: {to_str(height)}m')\n                else:\n                    space.ERROR(f'The ceiling height of {target_space[0]} is less than {min_height}m: {to_str(height)}m')\n            else:\n                space.WARNING(f'The {target_space[0]} is larger than {max_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('corridor', 'CORRIDOR')\n    max_area = 200.0\n    min_height = 2.29\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area <= max_area:\n                height = space.SELECT('height').UNIT('m').NUMBER()\n                if height >= min_height:\n                    space.SUCCESS(f'The ceiling height of {target_space[0]} is at least {min_height}m: {to_str(height)}m')\n                else:\n                    space.ERROR(f'The ceiling height of {target_space[0]} is less than {min_height}m: {to_str(height)}m')\n            else:\n                space.WARNING(f'The {target_space[0]} is larger than {max_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('corridor', 'CORRIDOR')\n      max_area = 200.0\n      min_height = 2.29\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area <= max_area:\n                  height = space.SELECT('height').UNIT('m').NUMBER()\n                  if height >= min_height:\n                      space.SUCCESS(f'The ceiling height of {target_space[0]} is at least {min_height}m: {to_str(height)}m')\n                  else:\n                      space.ERROR(f'The ceiling height of {target_space[0]} is less than {min_height}m: {to_str(height)}m')\n              else:\n                  space.WARNING(f'The {target_space[0]} is larger than {max_area}m²: {to_str(area)}m²')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 19,
      "sentence": "The windowsill height in a single patient room shall not exceed 0.9 meters above the floor level.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.98,
        "ted": 0.984,
        "functional": 0.817
      },
      "is_valid": true,
      "processing_time": 0.323,
      "generated_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_element = ('window', 'M_Fixed:W')\n    max_height = 0.9\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            found = False\n            for elem in space.SELECT('containing element'):\n                if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                    height = elem.SELECT('elevation above').UNIT('m').NUMBER()\n                    if height <= max_height:\n                        elem.SUCCESS(f'The height of {target_element[0]} in {target_space[0]} does not exceed {max_height}m: {to_str(height)}m')\n                    else:\n                        elem.ERROR(f'The height of {target_element[0]} in {target_space[0]} exceeds {max_height}m: {to_str(height)}m')\n                    found = True\n            if not found:\n                space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_element = ('window', 'M_Fixed:W')\n    max_height = 0.9\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            found = False\n            for elem in space.SELECT('containing element'):\n                if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                    height = elem.SELECT('elevation above').UNIT('m').NUMBER()\n                    if height <= max_height:\n                        elem.SUCCESS(f'The height of {target_element[0]} in {target_space[0]} does not exceed {max_height}m: {to_str(height)}m')\n                    else:\n                        elem.ERROR(f'The height of {target_element[0]} in {target_space[0]} exceeds {max_height}m: {to_str(height)}m')\n                    found = True\n            if not found:\n                space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n      target_element = ('window', 'M_Fixed:W')\n      max_height = 0.9\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              found = False\n              for elem in space.SELECT('containing element'):\n                  if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                      height = elem.SELECT('elevation above').UNIT('m').NUMBER()\n                      if height <= max_height:\n                          elem.SUCCESS(f'The height of {target_element[0]} in {target_space[0]} does not exceed {max_height}m: {to_str(height)}m')\n                      else:\n                          elem.ERROR(f'The height of {target_element[0]} in {target_space[0]} exceeds {max_height}m: {to_str(height)}m')\n                      found = True\n              if not found:\n                  space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 20,
      "sentence": "The windowsill height in both a single patient room and a two-bed patient room shall not exceed 0.9 meters above the floor level.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.971,
        "ted": 0.99,
        "functional": 0.815
      },
      "is_valid": true,
      "processing_time": 0.325,
      "generated_code": "def Check():\n    target_spaces = [\n        ('single patient room', 'SINGLE PATIENT ROOM'),\n        ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    ]\n    target_element = ('window', 'M_Fixed:W')\n    max_height = 0.9\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                found = False\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        height = elem.SELECT('elevation above').UNIT('m').NUMBER()\n                        if height <= max_height:\n                            elem.SUCCESS(f'The height of {target_element[0]} in {space_term} does not exceed {max_height}m: {to_str(height)}m')\n                        else:\n                            elem.ERROR(f'The height of {target_element[0]} in {space_term} exceeds {max_height}m: {to_str(height)}m')\n                        found = True\n                if not found:\n                    space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_spaces = [\n        ('single patient room', 'SINGLE PATIENT ROOM'),\n        ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    ]\n    target_element = ('window', 'M_Fixed:W')\n    max_height = 0.9\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                found = False\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        height = elem.SELECT('elevation above').UNIT('m').NUMBER()\n                        if height <= max_height:\n                            elem.SUCCESS(f'The height of {target_element[0]} in {space_term} does not exceed {max_height}m: {to_str(height)}m')\n                        else:\n                            elem.ERROR(f'The height of {target_element[0]} in {space_term} exceeds {max_height}m: {to_str(height)}m')\n                        found = True\n                if not found:\n                    space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('single patient room', 'SINGLE PATIENT ROOM'),\n          ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n      ]\n      target_element = ('window', 'M_Fixed:W')\n      max_height = 0.9\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for space_term, space_model in target_spaces:\n              if space_name == space_model:\n                  found = False\n                  for elem in space.SELECT('containing element'):\n                      if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                          height = elem.SELECT('elevation above').UNIT('m').NUMBER()\n                          if height <= max_height:\n                              elem.SUCCESS(f'The height of {target_element[0]} in {space_term} does not exceed {max_height}m: {to_str(height)}m')\n                          else:\n                              elem.ERROR(f'The height of {target_element[0]} in {space_term} exceeds {max_height}m: {to_str(height)}m')\n                          found = True\n                  if not found:\n                      space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n      for space_term, space_model in target_spaces:\n          if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n              ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 21,
      "sentence": "If the area of a single patient room is 10 m² or larger, the windowsill height in the room shall not exceed 0.9 meters above the floor level.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.957,
        "ted": 0.956,
        "functional": 0.808
      },
      "is_valid": true,
      "processing_time": 0.318,
      "generated_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_element = ('window', 'M_Fixed:W')\n    min_area = 10.0\n    max_height = 0.9\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                found = False\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        height = elem.SELECT('elevation above').UNIT('m').NUMBER()\n                        if height <= max_height:\n                            elem.SUCCESS(f'The height of {target_element[0]} in {target_space[0]} does not exceed {max_height}m: {to_str(height)}m')\n                        else:\n                            elem.ERROR(f'The height of {target_element[0]} in {target_space[0]} exceeds {max_height}m: {to_str(height)}m')\n                        found = True\n                if not found:\n                    space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n            else:\n                space.WARNING(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_element = ('window', 'M_Fixed:W')\n    min_area = 10.0\n    max_height = 0.9\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                found = False\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        height = elem.SELECT('elevation above').UNIT('m').NUMBER()\n                        if height <= max_height:\n                            elem.SUCCESS(f'The height of {target_element[0]} in {target_space[0]} does not exceed {max_height}m: {to_str(height)}m')\n                        else:\n                            elem.ERROR(f'The height of {target_element[0]} in {target_space[0]} exceeds {max_height}m: {to_str(height)}m')\n                        found = True\n                if not found:\n                    space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n            else:\n                space.WARNING(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n      target_element = ('window', 'M_Fixed:W')\n      min_area = 10.0\n      max_height = 0.9\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area >= min_area:\n                  found = False\n                  for elem in space.SELECT('containing element'):\n                      if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                          height = elem.SELECT('elevation above').UNIT('m').NUMBER()\n                          if height <= max_height:\n                              elem.SUCCESS(f'The height of {target_element[0]} in {target_space[0]} does not exceed {max_height}m: {to_str(height)}m')\n                          else:\n                              elem.ERROR(f'The height of {target_element[0]} in {target_space[0]} exceeds {max_height}m: {to_str(height)}m')\n                          found = True\n                  if not found:\n                      space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n              else:\n                  space.WARNING(f'The {target_space[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 22,
      "sentence": "The height of the electrical outlets in an operating room shall be at least 1 meter above the floor level.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.964,
        "ted": 0.972,
        "functional": 0.817
      },
      "is_valid": true,
      "processing_time": 0.334,
      "generated_code": "def Check():\n    target_space = ('operating room', 'OPERATING ROOM')\n    target_equipment = ('electrical outlet', 'M_Duplex Receptacle:Standard')\n    mim_height = 1.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            found = False\n            for equip in space.SELECT('containing element'):\n                if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                    height = equip.SELECT('elevation above').UNIT('m').NUMBER()\n                    if height >= mim_height:\n                        equip.SUCCESS(f'The height of {target_equipment[0]} in {target_space[0]} exceeds {mim_height}m: {to_str(height)}m')\n                    else:\n                        equip.ERROR(f'The height of {target_equipment[0]} in {target_space[0]} does not exceed {mim_height}m: {to_str(height)}m')\n                    found = True\n            if not found:\n                space.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('operating room', 'OPERATING ROOM')\n    target_equipment = ('electrical outlet', 'M_Duplex Receptacle:Standard')\n    mim_height = 1.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            found = False\n            for equip in space.SELECT('containing element'):\n                if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                    height = equip.SELECT('elevation above').UNIT('m').NUMBER()\n                    if height >= mim_height:\n                        equip.SUCCESS(f'The height of {target_equipment[0]} in {target_space[0]} exceeds {mim_height}m: {to_str(height)}m')\n                    else:\n                        equip.ERROR(f'The height of {target_equipment[0]} in {target_space[0]} does not exceed {mim_height}m: {to_str(height)}m')\n                    found = True\n            if not found:\n                space.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('operating room', 'OPERATING ROOM')\n      target_equipment = ('electrical outlet', 'M_Duplex Receptacle:Standard')\n      mim_height = 1.0\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              found = False\n              for equip in space.SELECT('containing element'):\n                  if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                      height = equip.SELECT('elevation above').UNIT('m').NUMBER()\n                      if height >= mim_height:\n                          equip.SUCCESS(f'The height of {target_equipment[0]} in {target_space[0]} exceeds {mim_height}m: {to_str(height)}m')\n                      else:\n                          equip.ERROR(f'The height of {target_equipment[0]} in {target_space[0]} does not exceed {mim_height}m: {to_str(height)}m')\n                      found = True\n              if not found:\n                  space.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 23,
      "sentence": "The height of the electrical outlets in both an operating room and a delivery room shall be at least 1 meter above the floor level.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.954,
        "ted": 0.954,
        "functional": 0.818
      },
      "is_valid": true,
      "processing_time": 0.328,
      "generated_code": "def Check():\n    target_spaces = [\n        ('operating room', 'OPERATING ROOM'),\n        ('delivery room', 'DELIVERY ROOM')\n    ]\n    target_equipment = ('electrical outlet', 'M_Duplex Receptacle:Standard')\n    mim_height = 1.0\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                found = False\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                        height = equip.SELECT('elevation above').UNIT('m').NUMBER()\n                        if height >= mim_height:\n                            equip.SUCCESS(f'The height of {target_equipment[0]} in {space_term} exceeds {mim_height}m: {to_str(height)}m')\n                        else:\n                            equip.ERROR(f'The height of {target_equipment[0]} in {space_term} does not exceed {mim_height}m: {to_str(height)}m')\n                        found = True\n                if not found:\n                    space.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_spaces = [\n        ('operating room', 'OPERATING ROOM'),\n        ('delivery room', 'DELIVERY ROOM')\n    ]\n    target_equipment = ('electrical outlet', 'M_Duplex Receptacle:Standard')\n    mim_height = 1.0\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                found = False\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                        height = equip.SELECT('elevation above').UNIT('m').NUMBER()\n                        if height >= mim_height:\n                            equip.SUCCESS(f'The height of {target_equipment[0]} in {space_term} exceeds {mim_height}m: {to_str(height)}m')\n                        else:\n                            equip.ERROR(f'The height of {target_equipment[0]} in {space_term} does not exceed {mim_height}m: {to_str(height)}m')\n                        found = True\n                if not found:\n                    space.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('operating room', 'OPERATING ROOM'),\n          ('delivery room', 'DELIVERY ROOM')\n      ]\n      target_equipment = ('electrical outlet', 'M_Duplex Receptacle:Standard')\n      mim_height = 1.0\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for space_term, space_model in target_spaces:\n              if space_name == space_model:\n                  found = False\n                  for equip in space.SELECT('containing element'):\n                      if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                          height = equip.SELECT('elevation above').UNIT('m').NUMBER()\n                          if height >= mim_height:\n                              equip.SUCCESS(f'The height of {target_equipment[0]} in {space_term} exceeds {mim_height}m: {to_str(height)}m')\n                          else:\n                              equip.ERROR(f'The height of {target_equipment[0]} in {space_term} does not exceed {mim_height}m: {to_str(height)}m')\n                          found = True\n                  if not found:\n                      space.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n      for space_term, space_model in target_spaces:\n          if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n              ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 24,
      "sentence": "If the area of an operating room is 10 m² or larger, the height of the electrical outlets shall be at least 1 meter above the floor level.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.988,
        "ted": 0.975,
        "functional": 0.809
      },
      "is_valid": true,
      "processing_time": 0.318,
      "generated_code": "def Check():\n    target_space = ('operating room', 'OPERATING ROOM')\n    target_equipment = ('electrical outlet', 'M_Duplex Receptacle:Standard')\n    min_area = 10.0\n    mim_height = 1.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                found = False\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                        height = equip.SELECT('elevation above').UNIT('m').NUMBER()\n                        if height >= mim_height:\n                            equip.SUCCESS(f'The height of {target_equipment[0]} in {target_space[0]} exceeds {mim_height}m: {to_str(height)}m')\n                        else:\n                            equip.ERROR(f'The height of {target_equipment[0]} in {target_space[0]} does not exceed {mim_height}m: {to_str(height)}m')\n                        found = True\n            if not found:\n                space.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('operating room', 'OPERATING ROOM')\n    target_equipment = ('electrical outlet', 'M_Duplex Receptacle:Standard')\n    min_area = 10.0\n    mim_height = 1.0\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                found = False\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                        height = equip.SELECT('elevation above').UNIT('m').NUMBER()\n                        if height >= mim_height:\n                            equip.SUCCESS(f'The height of {target_equipment[0]} in {target_space[0]} exceeds {mim_height}m: {to_str(height)}m')\n                        else:\n                            equip.ERROR(f'The height of {target_equipment[0]} in {target_space[0]} does not exceed {mim_height}m: {to_str(height)}m')\n                        found = True\n            if not found:\n                space.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('operating room', 'OPERATING ROOM')\n      target_equipment = ('electrical outlet', 'M_Duplex Receptacle:Standard')\n      min_area = 10.0\n      mim_height = 1.0\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area >= min_area:\n                  found = False\n                  for equip in space.SELECT('containing element'):\n                      if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                          height = equip.SELECT('elevation above').UNIT('m').NUMBER()\n                          if height >= mim_height:\n                              equip.SUCCESS(f'The height of {target_equipment[0]} in {target_space[0]} exceeds {mim_height}m: {to_str(height)}m')\n                          else:\n                              equip.ERROR(f'The height of {target_equipment[0]} in {target_space[0]} does not exceed {mim_height}m: {to_str(height)}m')\n                          found = True\n              if not found:\n                  space.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 25,
      "sentence": "The width of a corridor shall be at least 1.8 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.977,
        "ted": 0.958,
        "functional": 0.863
      },
      "is_valid": true,
      "processing_time": 0.308,
      "generated_code": "def Check():\n    target_space = ('corridor', 'CORRIDOR')\n    min_width = 1.8\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            width = space.SELECT('width').UNIT('m').NUMBER()\n            if width >= min_width:\n                space.SUCCESS(f'The width of {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n            else:\n                space.ERROR(f'The width of {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('corridor', 'CORRIDOR')\n    min_width = 1.8\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            width = space.SELECT('width').UNIT('m').NUMBER()\n            if width >= min_width:\n                space.SUCCESS(f'The width of {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n            else:\n                space.ERROR(f'The width of {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('corridor', 'CORRIDOR')\n      min_width = 1.8\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              width = space.SELECT('width').UNIT('m').NUMBER()\n              if width >= min_width:\n                  space.SUCCESS(f'The width of {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n              else:\n                  space.ERROR(f'The width of {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 26,
      "sentence": "The width of both a corridor and a lobby shall be at least 1.8 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.984,
        "ted": 0.971,
        "functional": 0.858
      },
      "is_valid": true,
      "processing_time": 0.312,
      "generated_code": "def Check():\n    target_spaces = [\n        ('corridor', 'CORRIDOR'),\n        ('lobby', 'LOBBY'),\n    ]\n    min_width = 1.8\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                width = space.SELECT('width').UNIT('m').NUMBER()\n                if width >= min_width:\n                    space.SUCCESS(f'The width of {space_term} is at least {min_width}m: {to_str(width)}m')\n                else:\n                    space.ERROR(f'The width of {space_term} is less than {min_width}m: {to_str(width)}m')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_spaces = [\n        ('corridor', 'CORRIDOR'),\n        ('lobby', 'LOBBY'),\n    ]\n    min_width = 1.8\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                width = space.SELECT('width').UNIT('m').NUMBER()\n                if width >= min_width:\n                    space.SUCCESS(f'The width of {space_term} is at least {min_width}m: {to_str(width)}m')\n                else:\n                    space.ERROR(f'The width of {space_term} is less than {min_width}m: {to_str(width)}m')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('corridor', 'CORRIDOR'),\n          ('lobby', 'LOBBY'),\n      ]\n      min_width = 1.8\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for space_term, space_model in target_spaces:\n              if space_name == space_model:\n                  width = space.SELECT('width').UNIT('m').NUMBER()\n                  if width >= min_width:\n                      space.SUCCESS(f'The width of {space_term} is at least {min_width}m: {to_str(width)}m')\n                  else:\n                      space.ERROR(f'The width of {space_term} is less than {min_width}m: {to_str(width)}m')\n      for space_term, space_model in target_spaces:\n          if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n              ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 27,
      "sentence": "If a corridor is located on the second floor, its width shall be at least 1.8 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.982,
        "ted": 0.973,
        "functional": 0.838
      },
      "is_valid": true,
      "processing_time": 0.328,
      "generated_code": "def Check():\n    target_space = ('corridor', 'CORRIDOR')\n    target_level = 'Second Floor'\n    min_width = 1.8\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            level = space.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                width = space.SELECT('width').UNIT('m').NUMBER()\n                if width >= min_width:\n                    space.SUCCESS(f'The width of {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n                else:\n                    space.ERROR(f'The width of {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n            else:\n                space.WARNING(f'The {target_space[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('corridor', 'CORRIDOR')\n    target_level = 'Second Floor'\n    min_width = 1.8\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            level = space.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                width = space.SELECT('width').UNIT('m').NUMBER()\n                if width >= min_width:\n                    space.SUCCESS(f'The width of {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n                else:\n                    space.ERROR(f'The width of {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n            else:\n                space.WARNING(f'The {target_space[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('corridor', 'CORRIDOR')\n      target_level = 'Second Floor'\n      min_width = 1.8\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              level = space.SELECT('my storey').SELECT('name').STRING()\n              if level == target_level:\n                  width = space.SELECT('width').UNIT('m').NUMBER()\n                  if width >= min_width:\n                      space.SUCCESS(f'The width of {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n                  else:\n                      space.ERROR(f'The width of {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n              else:\n                  space.WARNING(f'The {target_space[0]} is not located on the {target_level}: current level is {level}.')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 28,
      "sentence": "The door width of a single patient room shall be at least 1.45 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.958,
        "ted": 0.976,
        "functional": 0.819
      },
      "is_valid": true,
      "processing_time": 0.319,
      "generated_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_element = ('door', 'Sliding Door:Steel Sliding Door')\n    min_width = 1.45\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            found = False\n            for elem in space.SELECT('containing element'):\n                if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                    width = elem.SELECT('width').UNIT('m').NUMBER()\n                    if width >= min_width:\n                        elem.SUCCESS(f'The width of {target_element[0]} in {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n                    else:\n                        elem.ERROR(f'The width of {target_element[0]} in {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n                    found = True\n            if not found:\n                space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_element = ('door', 'Sliding Door:Steel Sliding Door')\n    min_width = 1.45\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            found = False\n            for elem in space.SELECT('containing element'):\n                if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                    width = elem.SELECT('width').UNIT('m').NUMBER()\n                    if width >= min_width:\n                        elem.SUCCESS(f'The width of {target_element[0]} in {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n                    else:\n                        elem.ERROR(f'The width of {target_element[0]} in {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n                    found = True\n            if not found:\n                space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n      target_element = ('door', 'Sliding Door:Steel Sliding Door')\n      min_width = 1.45\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              found = False\n              for elem in space.SELECT('containing element'):\n                  if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                      width = elem.SELECT('width').UNIT('m').NUMBER()\n                      if width >= min_width:\n                          elem.SUCCESS(f'The width of {target_element[0]} in {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n                      else:\n                          elem.ERROR(f'The width of {target_element[0]} in {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n                      found = True\n              if not found:\n                  space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 29,
      "sentence": "The door width of both a single patient room and a two-bed patient room shall be at least 1.45 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.96,
        "ted": 0.97,
        "functional": 0.819
      },
      "is_valid": true,
      "processing_time": 0.316,
      "generated_code": "def Check():\n    target_spaces = [\n        ('single patient room', 'SINGLE PATIENT ROOM'),\n        ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    ]\n    target_element = ('door', 'Sliding Door:Steel Sliding Door')\n    min_width = 1.45\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                found = False\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        width = elem.SELECT('width').UNIT('m').NUMBER()\n                        if width >= min_width:\n                            elem.SUCCESS(f'The width of {target_element[0]} in {space_term} is at least {min_width}m: {to_str(width)}m')\n                        else:\n                            elem.ERROR(f'The width of {target_element[0]} in {space_term} is less than {min_width}m: {to_str(width)}m')\n                        found = True\n                if not found:\n                    space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_spaces = [\n        ('single patient room', 'SINGLE PATIENT ROOM'),\n        ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    ]\n    target_element = ('door', 'Sliding Door:Steel Sliding Door')\n    min_width = 1.45\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                found = False\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        width = elem.SELECT('width').UNIT('m').NUMBER()\n                        if width >= min_width:\n                            elem.SUCCESS(f'The width of {target_element[0]} in {space_term} is at least {min_width}m: {to_str(width)}m')\n                        else:\n                            elem.ERROR(f'The width of {target_element[0]} in {space_term} is less than {min_width}m: {to_str(width)}m')\n                        found = True\n                if not found:\n                    space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('single patient room', 'SINGLE PATIENT ROOM'),\n          ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n      ]\n      target_element = ('door', 'Sliding Door:Steel Sliding Door')\n      min_width = 1.45\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for space_term, space_model in target_spaces:\n              if space_name == space_model:\n                  found = False\n                  for elem in space.SELECT('containing element'):\n                      if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                          width = elem.SELECT('width').UNIT('m').NUMBER()\n                          if width >= min_width:\n                              elem.SUCCESS(f'The width of {target_element[0]} in {space_term} is at least {min_width}m: {to_str(width)}m')\n                          else:\n                              elem.ERROR(f'The width of {target_element[0]} in {space_term} is less than {min_width}m: {to_str(width)}m')\n                          found = True\n                  if not found:\n                      space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n      for space_term, space_model in target_spaces:\n          if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n              ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 30,
      "sentence": "If the occupant of a single patient room is a bariatric patient, the door width shall be at least 1.45 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.952,
        "ted": 0.976,
        "functional": 0.81
      },
      "is_valid": true,
      "processing_time": 0.317,
      "generated_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_occupation = 'staff'\n    target_element = ('door', 'Sliding Door:Steel Sliding Door')\n    min_width = 1.45\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            occupation = space.SELECT('prop', '1_Occupied').STRING()\n            if occupation.lower() == target_occupation.lower():\n                found = False\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        width = elem.SELECT('width').UNIT('m').NUMBER()\n                        if width >= min_width:\n                            elem.SUCCESS(f'The width of {target_element[0]} in {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n                        else:\n                            elem.ERROR(f'The width of {target_element[0]} in {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n                        found = True\n                if not found:\n                    space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n            else:\n                space.WARNING(f'The {target_space[0]} is not occupied by {target_occupation}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n    target_occupation = 'staff'\n    target_element = ('door', 'Sliding Door:Steel Sliding Door')\n    min_width = 1.45\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            occupation = space.SELECT('prop', '1_Occupied').STRING()\n            if occupation.lower() == target_occupation.lower():\n                found = False\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        width = elem.SELECT('width').UNIT('m').NUMBER()\n                        if width >= min_width:\n                            elem.SUCCESS(f'The width of {target_element[0]} in {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n                        else:\n                            elem.ERROR(f'The width of {target_element[0]} in {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n                        found = True\n                if not found:\n                    space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n            else:\n                space.WARNING(f'The {target_space[0]} is not occupied by {target_occupation}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('single patient room', 'SINGLE PATIENT ROOM')\n      target_occupation = 'staff'\n      target_element = ('door', 'Sliding Door:Steel Sliding Door')\n      min_width = 1.45\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              occupation = space.SELECT('prop', '1_Occupied').STRING()\n              if occupation.lower() == target_occupation.lower():\n                  found = False\n                  for elem in space.SELECT('containing element'):\n                      if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                          width = elem.SELECT('width').UNIT('m').NUMBER()\n                          if width >= min_width:\n                              elem.SUCCESS(f'The width of {target_element[0]} in {target_space[0]} is at least {min_width}m: {to_str(width)}m')\n                          else:\n                              elem.ERROR(f'The width of {target_element[0]} in {target_space[0]} is less than {min_width}m: {to_str(width)}m')\n                          found = True\n                  if not found:\n                      space.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n              else:\n                  space.WARNING(f'The {target_space[0]} is not occupied by {target_occupation}.')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 31,
      "sentence": "The width of an elevator car shall be at least 1.73 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.964,
        "ted": 0.987,
        "functional": 0.853
      },
      "is_valid": true,
      "processing_time": 0.312,
      "generated_code": "def Check():\n    target_equipment = ('elevator car', 'M_Elevator-Hydraulic:2000 lbs')\n    min_width = 1.73\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n            width = equip.SELECT('width').UNIT('m').NUMBER()\n            if width >= min_width:\n                equip.SUCCESS(f'The width of {target_equipment[0]} is at least {min_width}m: {to_str(width)}m')\n            else:\n                equip.ERROR(f'The width of {target_equipment[0]} is less than {min_width}m: {to_str(width)}m')\n    ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_equipment = ('elevator car', 'M_Elevator-Hydraulic:2000 lbs')\n    min_width = 1.73\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n            width = equip.SELECT('width').UNIT('m').NUMBER()\n            if width >= min_width:\n                equip.SUCCESS(f'The width of {target_equipment[0]} is at least {min_width}m: {to_str(width)}m')\n            else:\n                equip.ERROR(f'The width of {target_equipment[0]} is less than {min_width}m: {to_str(width)}m')\n    ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_equipment = ('elevator car', 'M_Elevator-Hydraulic:2000 lbs')\n      min_width = 1.73\n      for equip in SELECT('element'):\n          if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n              width = equip.SELECT('width').UNIT('m').NUMBER()\n              if width >= min_width:\n                  equip.SUCCESS(f'The width of {target_equipment[0]} is at least {min_width}m: {to_str(width)}m')\n              else:\n                  equip.ERROR(f'The width of {target_equipment[0]} is less than {min_width}m: {to_str(width)}m')\n      ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 32,
      "sentence": "The width of an elevator car shall be at least 1.73 meters, and the depth shall be at least 2.74 meters.",
 
      "confidence": 0.74,
      "similarities": {
        "ast": 0.982,
        "ted": 0.966,
        "functional": 0.842
      },
      "is_valid": true,
      "processing_time": 0.325,
      "generated_code": "def Check():\n    target_equipment = ('elevator car', 'M_Elevator-Hydraulic:2000 lbs')\n    min_width = 1.73\n    min_depth = 2.74\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n            width = equip.SELECT('width').UNIT('m').NUMBER()\n            depth = equip.SELECT('depth').UNIT('m').NUMBER()\n            if width >= min_width:\n                equip.SUCCESS(f'The width of {target_equipment[0]} is at least {min_width}m: {to_str(width)}m')\n            else:\n                equip.ERROR(f'The width of {target_equipment[0]} is less than {min_width}m: {to_str(width)}m')\n            if depth >= min_depth:\n                equip.SUCCESS(f'The depth of {target_equipment[0]} is at least {min_depth}m: {to_str(depth)}m')\n            else:\n                equip.ERROR(f'The depth of {target_equipment[0]} is less than {min_depth}m: {to_str(depth)}m')\n    ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_equipment = ('elevator car', 'M_Elevator-Hydraulic:2000 lbs')\n    min_width = 1.73\n    min_depth = 2.74\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n            width = equip.SELECT('width').UNIT('m').NUMBER()\n            depth = equip.SELECT('depth').UNIT('m').NUMBER()\n            if width >= min_width:\n                equip.SUCCESS(f'The width of {target_equipment[0]} is at least {min_width}m: {to_str(width)}m')\n            else:\n                equip.ERROR(f'The width of {target_equipment[0]} is less than {min_width}m: {to_str(width)}m')\n            if depth >= min_depth:\n                equip.SUCCESS(f'The depth of {target_equipment[0]} is at least {min_depth}m: {to_str(depth)}m')\n            else:\n                equip.ERROR(f'The depth of {target_equipment[0]} is less than {min_depth}m: {to_str(depth)}m')\n    ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_equipment = ('elevator car', 'M_Elevator-Hydraulic:2000 lbs')\n      min_width = 1.73\n      min_depth = 2.74\n      for equip in SELECT('element'):\n          if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n              width = equip.SELECT('width').UNIT('m').NUMBER()\n              depth = equip.SELECT('depth').UNIT('m').NUMBER()\n              if width >= min_width:\n                  equip.SUCCESS(f'The width of {target_equipment[0]} is at least {min_width}m: {to_str(width)}m')\n              else:\n                  equip.ERROR(f'The width of {target_equipment[0]} is less than {min_width}m: {to_str(width)}m')\n              if depth >= min_depth:\n                  equip.SUCCESS(f'The depth of {target_equipment[0]} is at least {min_depth}m: {to_str(depth)}m')\n              else:\n                  equip.ERROR(f'The depth of {target_equipment[0]} is less than {min_depth}m: {to_str(depth)}m')\n      ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 33,
      "sentence": "If there is only one elevator, the width of the elevator car shall be at least 1.73 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.954,
        "ted": 0.964,
        "functional": 0.826
      },
      "is_valid": true,
      "processing_time": 0.307,
      "generated_code": "def Check():\n    target_equipment = ('elevator car', 'M_Elevator-Hydraulic:2000 lbs')\n    min_width = 1.73\n    target_count = 1\n    matched_equipments = []\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n            matched_equipments.append(equip)\n    count = len(matched_equipments)\n    if count == target_count:\n        for equip in matched_equipments:\n            width = equip.SELECT('width').UNIT('m').NUMBER()\n            if width >= min_width:\n                equip.SUCCESS(f'The width of {target_equipment[0]} is at least {min_width}m: {to_str(width)}m')\n            else:\n                equip.ERROR(f'The width of {target_equipment[0]} is less than {min_width}m: {to_str(width)}m')\n    else:\n        ROOT.WARNING(f'The number of {target_equipment[0]} is not {target_count}: {count}')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_equipment = ('elevator car', 'M_Elevator-Hydraulic:2000 lbs')\n    min_width = 1.73\n    target_count = 1\n    matched_equipments = []\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n            matched_equipments.append(equip)\n    count = len(matched_equipments)\n    if count == target_count:\n        for equip in matched_equipments:\n            width = equip.SELECT('width').UNIT('m').NUMBER()\n            if width >= min_width:\n                equip.SUCCESS(f'The width of {target_equipment[0]} is at least {min_width}m: {to_str(width)}m')\n            else:\n                equip.ERROR(f'The width of {target_equipment[0]} is less than {min_width}m: {to_str(width)}m')\n    else:\n        ROOT.WARNING(f'The number of {target_equipment[0]} is not {target_count}: {count}')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_equipment = ('elevator car', 'M_Elevator-Hydraulic:2000 lbs')\n      min_width = 1.73\n      target_count = 1\n      matched_equipments = []\n      for equip in SELECT('element'):\n          if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n              matched_equipments.append(equip)\n      count = len(matched_equipments)\n      if count == target_count:\n          for equip in matched_equipments:\n              width = equip.SELECT('width').UNIT('m').NUMBER()\n              if width >= min_width:\n                  equip.SUCCESS(f'The width of {target_equipment[0]} is at least {min_width}m: {to_str(width)}m')\n              else:\n                  equip.ERROR(f'The width of {target_equipment[0]} is less than {min_width}m: {to_str(width)}m')\n      else:\n          ROOT.WARNING(f'The number of {target_equipment[0]} is not {target_count}: {count}')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 34,
      "sentence": "There shall be at least one airborne infection isolation room.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.967,
        "ted": 0.976,
        "functional": 0.859
      },
      "is_valid": true,
      "processing_time": 0.319,
      "generated_code": "def Check():\n    target_space = ('airborne infection isolation room', 'AIRBORNE INFECTION ISOLATION ROOM')\n    min_count = 1\n    matched_spaces = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            matched_spaces.append(space)\n    count = len(matched_spaces)\n    if count >= min_count:\n        space.SUCCESS(f'The number of {target_space[0]} is at least {min_count}: {count}')\n    else:\n        space.ERROR(f'The number of {target_space[0]} is less than {min_count}: {count}')",
      "expected_code": "def Check():\n    target_space = ('airborne infection isolation room', 'AIRBORNE INFECTION ISOLATION ROOM')\n    min_count = 1\n    matched_spaces = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            matched_spaces.append(space)\n    count = len(matched_spaces)\n    if count >= min_count:\n        space.SUCCESS(f'The number of {target_space[0]} is at least {min_count}: {count}')\n    else:\n        space.ERROR(f'The number of {target_space[0]} is less than {min_count}: {count}')",
      "code_diff": "  def Check():\n      target_space = ('airborne infection isolation room', 'AIRBORNE INFECTION ISOLATION ROOM')\n      min_count = 1\n      matched_spaces = []\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              matched_spaces.append(space)\n      count = len(matched_spaces)\n      if count >= min_count:\n          space.SUCCESS(f'The number of {target_space[0]} is at least {min_count}: {count}')\n      else:\n          space.ERROR(f'The number of {target_space[0]} is less than {min_count}: {count}')"
    },
    {
      "sentence_id": 35,
      "sentence": "There shall be at least one airborne infection isolation room and at least one protective environment room.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.987,
        "ted": 0.985,
        "functional": 0.859
      },
      "is_valid": true,
      "processing_time": 0.314,
      "generated_code": "def Check():\n    target_spaces = [\n        ('airborne infection isolation room', 'AIRBORNE INFECTION ISOLATION ROOM'),\n        ('protective environment room', 'PROTECTIVE ENVIRONMENT ROOM'),\n    ]\n    min_count = 1\n    for space_term, space_model in target_spaces:\n        matched_spaces = []\n        for space in SELECT('space'):\n            if space.SELECT('name').STRING() == space_model:\n                matched_spaces.append(space)\n        count = len(matched_spaces)\n        if count >= min_count:\n            space.SUCCESS(f'The number of {space_term} is at least {min_count}: {count}')\n        else:\n            space.ERROR(f'The number of {space_term} is less than {min_count}: {count}')",
      "expected_code": "def Check():\n    target_spaces = [\n        ('airborne infection isolation room', 'AIRBORNE INFECTION ISOLATION ROOM'),\n        ('protective environment room', 'PROTECTIVE ENVIRONMENT ROOM'),\n    ]\n    min_count = 1\n    for space_term, space_model in target_spaces:\n        matched_spaces = []\n        for space in SELECT('space'):\n            if space.SELECT('name').STRING() == space_model:\n                matched_spaces.append(space)\n        count = len(matched_spaces)\n        if count >= min_count:\n            space.SUCCESS(f'The number of {space_term} is at least {min_count}: {count}')\n        else:\n            space.ERROR(f'The number of {space_term} is less than {min_count}: {count}')",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('airborne infection isolation room', 'AIRBORNE INFECTION ISOLATION ROOM'),\n          ('protective environment room', 'PROTECTIVE ENVIRONMENT ROOM'),\n      ]\n      min_count = 1\n      for space_term, space_model in target_spaces:\n          matched_spaces = []\n          for space in SELECT('space'):\n              if space.SELECT('name').STRING() == space_model:\n                  matched_spaces.append(space)\n          count = len(matched_spaces)\n          if count >= min_count:\n              space.SUCCESS(f'The number of {space_term} is at least {min_count}: {count}')\n          else:\n              space.ERROR(f'The number of {space_term} is less than {min_count}: {count}')"
    },
    {
      "sentence_id": 36,
      "sentence": "If the site area is 5,000 m² or larger, there shall be at least one airborne infection isolation room.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.978,
        "ted": 0.986,
        "functional": 0.83
      },
      "is_valid": true,
      "processing_time": 0.313,
      "generated_code": "def Check():\n    check_site = ('site', 'Toposolid:Site')\n    check_min_area = 5000.0\n    target_space = ('airborne infection isolation room', 'AIRBORNE INFECTION ISOLATION ROOM')\n    min_count = 1\n    for check in SELECT('proxy'):\n        if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                matched_spaces = []\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space[1]:\n                        matched_spaces.append(space)\n                count = len(matched_spaces)\n                if count >= min_count:\n                    space.SUCCESS(f'The number of {target_space[0]} is at least {min_count}: {count}')\n                else:\n                    space.ERROR(f'The number of {target_space[0]} is less than {min_count}: {count}')\n                return\n            else:\n                ROOT.WARNING(f'{check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    check_site = ('site', 'Toposolid:Site')\n    check_min_area = 5000.0\n    target_space = ('airborne infection isolation room', 'AIRBORNE INFECTION ISOLATION ROOM')\n    min_count = 1\n    for check in SELECT('proxy'):\n        if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                matched_spaces = []\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space[1]:\n                        matched_spaces.append(space)\n                count = len(matched_spaces)\n                if count >= min_count:\n                    space.SUCCESS(f'The number of {target_space[0]} is at least {min_count}: {count}')\n                else:\n                    space.ERROR(f'The number of {target_space[0]} is less than {min_count}: {count}')\n                return\n            else:\n                ROOT.WARNING(f'{check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      check_site = ('site', 'Toposolid:Site')\n      check_min_area = 5000.0\n      target_space = ('airborne infection isolation room', 'AIRBORNE INFECTION ISOLATION ROOM')\n      min_count = 1\n      for check in SELECT('proxy'):\n          if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n              area_check = check.SELECT('area').UNIT('m2').NUMBER()\n              if area_check >= check_min_area:\n                  matched_spaces = []\n                  for space in SELECT('space'):\n                      if space.SELECT('name').STRING() == target_space[1]:\n                          matched_spaces.append(space)\n                  count = len(matched_spaces)\n                  if count >= min_count:\n                      space.SUCCESS(f'The number of {target_space[0]} is at least {min_count}: {count}')\n                  else:\n                      space.ERROR(f'The number of {target_space[0]} is less than {min_count}: {count}')\n                  return\n              else:\n                  ROOT.WARNING(f'{check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n              return\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 37,
      "sentence": "The main parking lot shall have at least 20 parking spaces.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.971,
        "ted": 0.983,
        "functional": 0.863
      },
      "is_valid": true,
      "processing_time": 0.329,
      "generated_code": "def Check():\n    target_parking = ('main parking lot', 'MAIN PARKING LOT')\n    target_parkingSpace = 'Place_de_parking:4,8m x 2,4m - 90°'\n    min_count = 20\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_parking[1]:\n            count = 0\n            for element in space.SELECT('containing element'):\n                if element.SELECT('name').STRING().startswith(target_parkingSpace + ':'):\n                    count += 1\n            if count >= min_count:\n                space.SUCCESS(f'The number of parking spaces in {target_parking[0]} is at least {min_count}: {count}')\n            else:\n                space.ERROR(f'The number of parking spaces in {target_parking[0]} is less than {min_count}: {count}')\n            return\n    ROOT.WARNING(f'{target_parking[0]}({target_parking[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_parking = ('main parking lot', 'MAIN PARKING LOT')\n    target_parkingSpace = 'Place_de_parking:4,8m x 2,4m - 90°'\n    min_count = 20\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_parking[1]:\n            count = 0\n            for element in space.SELECT('containing element'):\n                if element.SELECT('name').STRING().startswith(target_parkingSpace + ':'):\n                    count += 1\n            if count >= min_count:\n                space.SUCCESS(f'The number of parking spaces in {target_parking[0]} is at least {min_count}: {count}')\n            else:\n                space.ERROR(f'The number of parking spaces in {target_parking[0]} is less than {min_count}: {count}')\n            return\n    ROOT.WARNING(f'{target_parking[0]}({target_parking[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_parking = ('main parking lot', 'MAIN PARKING LOT')\n      target_parkingSpace = 'Place_de_parking:4,8m x 2,4m - 90°'\n      min_count = 20\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_parking[1]:\n              count = 0\n              for element in space.SELECT('containing element'):\n                  if element.SELECT('name').STRING().startswith(target_parkingSpace + ':'):\n                      count += 1\n              if count >= min_count:\n                  space.SUCCESS(f'The number of parking spaces in {target_parking[0]} is at least {min_count}: {count}')\n              else:\n                  space.ERROR(f'The number of parking spaces in {target_parking[0]} is less than {min_count}: {count}')\n              return\n      ROOT.WARNING(f'{target_parking[0]}({target_parking[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 38,
      "sentence": "Both the main parking lot and the emergency visitor parking area shall have at least 10 parking spaces each.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.954,
        "ted": 0.985,
        "functional": 0.855
      },
      "is_valid": true,
      "processing_time": 0.312,
      "generated_code": "def Check():\n    target_parkings = [\n        ('main parking lot', 'MAIN PARKING LOT'),\n        ('emergency visitor parking area', 'EMERGENCY VISITOR PARKING AREA')\n    ]\n    target_parkingSpace = 'Place_de_parking:4,8m x 2,4m - 90°'\n    min_count = 10\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for parking_term, parking_model in target_parkings:\n            if space_name == parking_model:\n                count = 0\n                for element in space.SELECT('containing element'):\n                    if element.SELECT('name').STRING().startswith(target_parkingSpace + ':'):\n                        count += 1\n                if count >= min_count:\n                    space.SUCCESS(f'The number of parking spaces in {parking_term} is at least {min_count}: {count}')\n                else:\n                    space.ERROR(f'The number of parking spaces in {parking_term} is less than {min_count}: {count}')\n    for parking_term, parking_model in target_parkings:\n        if not any(space.SELECT('name').STRING() == parking_model for space in SELECT('space')):\n            ROOT.WARNING(f'{parking_term}({parking_model}) NOT FOUND')",
      "expected_code": "def Check():\n    target_parkings = [\n        ('main parking lot', 'MAIN PARKING LOT'),\n        ('emergency visitor parking area', 'EMERGENCY VISITOR PARKING AREA')\n    ]\n    target_parkingSpace = 'Place_de_parking:4,8m x 2,4m - 90°'\n    min_count = 10\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for parking_term, parking_model in target_parkings:\n            if space_name == parking_model:\n                count = 0\n                for element in space.SELECT('containing element'):\n                    if element.SELECT('name').STRING().startswith(target_parkingSpace + ':'):\n                        count += 1\n                if count >= min_count:\n                    space.SUCCESS(f'The number of parking spaces in {parking_term} is at least {min_count}: {count}')\n                else:\n                    space.ERROR(f'The number of parking spaces in {parking_term} is less than {min_count}: {count}')\n    for parking_term, parking_model in target_parkings:\n        if not any(space.SELECT('name').STRING() == parking_model for space in SELECT('space')):\n            ROOT.WARNING(f'{parking_term}({parking_model}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_parkings = [\n          ('main parking lot', 'MAIN PARKING LOT'),\n          ('emergency visitor parking area', 'EMERGENCY VISITOR PARKING AREA')\n      ]\n      target_parkingSpace = 'Place_de_parking:4,8m x 2,4m - 90°'\n      min_count = 10\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for parking_term, parking_model in target_parkings:\n              if space_name == parking_model:\n                  count = 0\n                  for element in space.SELECT('containing element'):\n                      if element.SELECT('name').STRING().startswith(target_parkingSpace + ':'):\n                          count += 1\n                  if count >= min_count:\n                      space.SUCCESS(f'The number of parking spaces in {parking_term} is at least {min_count}: {count}')\n                  else:\n                      space.ERROR(f'The number of parking spaces in {parking_term} is less than {min_count}: {count}')\n      for parking_term, parking_model in target_parkings:\n          if not any(space.SELECT('name').STRING() == parking_model for space in SELECT('space')):\n              ROOT.WARNING(f'{parking_term}({parking_model}) NOT FOUND')"
    },
    {
      "sentence_id": 39,
      "sentence": "If the area of outpatient clinic area is 500 m² or larger, the main parking lot shall have at least 20 parking spaces.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.959,
        "ted": 0.987,
        "functional": 0.837
      },
      "is_valid": true,
      "processing_time": 0.314,
      "generated_code": "def Check():\n    check_space = ('outpatient clinic area', 'Outpatient Clinic Area')\n    check_min_area = 500.0\n    target_parking = ('main parking lot', 'MAIN PARKING LOT')\n    target_parkingSpace = 'Place_de_parking:4,8m x 2,4m - 90°'\n    min_count = 20\n    for check in SELECT('space'):\n        if check.SELECT('name').STRING() == check_space[1]:\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_parking[1]:\n                        count = 0\n                        for element in space.SELECT('containing element'):\n                            if element.SELECT('name').STRING().startswith(target_parkingSpace + ':'):\n                                count += 1\n                        if count >= min_count:\n                            space.SUCCESS(f'The number of parking spaces in {target_parking[0]} is at least {min_count}: {count}')\n                        else:\n                            space.ERROR(f'The number of parking spaces in {target_parking[0]} is less than {min_count}: {count}')\n                        return\n                ROOT.WARNING(f'{target_parking[0]}({target_parking[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'The {check_space[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\n    ROOT.WARNING(f'{check_space[0]}({check_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    check_space = ('outpatient clinic area', 'Outpatient Clinic Area')\n    check_min_area = 500.0\n    target_parking = ('main parking lot', 'MAIN PARKING LOT')\n    target_parkingSpace = 'Place_de_parking:4,8m x 2,4m - 90°'\n    min_count = 20\n    for check in SELECT('space'):\n        if check.SELECT('name').STRING() == check_space[1]:\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_parking[1]:\n                        count = 0\n                        for element in space.SELECT('containing element'):\n                            if element.SELECT('name').STRING().startswith(target_parkingSpace + ':'):\n                                count += 1\n                        if count >= min_count:\n                            space.SUCCESS(f'The number of parking spaces in {target_parking[0]} is at least {min_count}: {count}')\n                        else:\n                            space.ERROR(f'The number of parking spaces in {target_parking[0]} is less than {min_count}: {count}')\n                        return\n                ROOT.WARNING(f'{target_parking[0]}({target_parking[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'The {check_space[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\n    ROOT.WARNING(f'{check_space[0]}({check_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      check_space = ('outpatient clinic area', 'Outpatient Clinic Area')\n      check_min_area = 500.0\n      target_parking = ('main parking lot', 'MAIN PARKING LOT')\n      target_parkingSpace = 'Place_de_parking:4,8m x 2,4m - 90°'\n      min_count = 20\n      for check in SELECT('space'):\n          if check.SELECT('name').STRING() == check_space[1]:\n              area_check = check.SELECT('area').UNIT('m2').NUMBER()\n              if area_check >= check_min_area:\n                  for space in SELECT('space'):\n                      if space.SELECT('name').STRING() == target_parking[1]:\n                          count = 0\n                          for element in space.SELECT('containing element'):\n                              if element.SELECT('name').STRING().startswith(target_parkingSpace + ':'):\n                                  count += 1\n                          if count >= min_count:\n                              space.SUCCESS(f'The number of parking spaces in {target_parking[0]} is at least {min_count}: {count}')\n                          else:\n                              space.ERROR(f'The number of parking spaces in {target_parking[0]} is less than {min_count}: {count}')\n                          return\n                  ROOT.WARNING(f'{target_parking[0]}({target_parking[1]}) NOT FOUND')\n              else:\n                  ROOT.WARNING(f'The {check_space[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n              return\n      ROOT.WARNING(f'{check_space[0]}({check_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 40,
      "sentence": "The number of structural columns within a patient treatment room shall not exceed 4.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.978,
        "ted": 0.974,
        "functional": 0.859
      },
      "is_valid": true,
      "processing_time": 0.311,
      "generated_code": "def Check():\n    target_space = ('patient treatment room', 'PATIENT TREATMENT ROOM')\n    target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n    max_count = 4\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            count = 0\n            for elem in space.SELECT('containing element'):\n                if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                    count += 1\n            if count <= max_count:\n                space.SUCCESS(f'The number of {target_element[0]} in {target_space[0]} does not exceed {max_count}: {count}')\n            else:\n                space.ERROR(f'The number of {target_element[0]} in {target_space[0]} exceeds {max_count}: {count}')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_space = ('patient treatment room', 'PATIENT TREATMENT ROOM')\n    target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n    max_count = 4\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            count = 0\n            for elem in space.SELECT('containing element'):\n                if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                    count += 1\n            if count <= max_count:\n                space.SUCCESS(f'The number of {target_element[0]} in {target_space[0]} does not exceed {max_count}: {count}')\n            else:\n                space.ERROR(f'The number of {target_element[0]} in {target_space[0]} exceeds {max_count}: {count}')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_space = ('patient treatment room', 'PATIENT TREATMENT ROOM')\n      target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n      max_count = 4\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              count = 0\n              for elem in space.SELECT('containing element'):\n                  if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                      count += 1\n              if count <= max_count:\n                  space.SUCCESS(f'The number of {target_element[0]} in {target_space[0]} does not exceed {max_count}: {count}')\n              else:\n                  space.ERROR(f'The number of {target_element[0]} in {target_space[0]} exceeds {max_count}: {count}')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 41,
      "sentence": "The number of structural columns within a patient treatment room and an electroconvulsive therapy treatment room shall not exceed 4 per room.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.982,
        "ted": 0.963,
        "functional": 0.85
      },
      "is_valid": true,
      "processing_time": 0.316,
      "generated_code": "def Check():\n    target_spaces = [\n        ('patient treatment room', 'PATIENT TREATMENT ROOM'),\n        ('electroconvulsive therapy treatment room', 'ELECTROCONVULSIVE THERAPY TREATMENT ROOM')\n    ]\n    target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n    max_count = 4\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                count = 0\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        count += 1\n                if count <= max_count:\n                    space.SUCCESS(f'The number of {target_element[0]} in {space_term} does not exceed {max_count}: {count}')\n                else:\n                    space.ERROR(f'The number of {target_element[0]} in {space_term} exceeds {max_count}: {count}')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')",
      "expected_code": "def Check():\n    target_spaces = [\n        ('patient treatment room', 'PATIENT TREATMENT ROOM'),\n        ('electroconvulsive therapy treatment room', 'ELECTROCONVULSIVE THERAPY TREATMENT ROOM')\n    ]\n    target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n    max_count = 4\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                count = 0\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        count += 1\n                if count <= max_count:\n                    space.SUCCESS(f'The number of {target_element[0]} in {space_term} does not exceed {max_count}: {count}')\n                else:\n                    space.ERROR(f'The number of {target_element[0]} in {space_term} exceeds {max_count}: {count}')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('patient treatment room', 'PATIENT TREATMENT ROOM'),\n          ('electroconvulsive therapy treatment room', 'ELECTROCONVULSIVE THERAPY TREATMENT ROOM')\n      ]\n      target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n      max_count = 4\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for space_term, space_model in target_spaces:\n              if space_name == space_model:\n                  count = 0\n                  for elem in space.SELECT('containing element'):\n                      if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                          count += 1\n                  if count <= max_count:\n                      space.SUCCESS(f'The number of {target_element[0]} in {space_term} does not exceed {max_count}: {count}')\n                  else:\n                      space.ERROR(f'The number of {target_element[0]} in {space_term} exceeds {max_count}: {count}')\n      for space_term, space_model in target_spaces:\n          if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n              ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')"
    },
    {
      "sentence_id": 42,
      "sentence": "If the area of a patient treatment room is 30 m² or less, the number of structural columns within the room shall not exceed 4.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.988,
        "ted": 0.952,
        "functional": 0.828
      },
      "is_valid": true,
      "processing_time": 0.326,
      "generated_code": "def Check():\n    target_space = ('patient treatment room', 'PATIENT TREATMENT ROOM')\n    target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n    max_area = 30.0\n    max_count = 4\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area <= max_area:\n                count = 0\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        count += 1\n                if count <= max_count:\n                    space.SUCCESS(f'The number of {target_element[0]} in {target_space[0]} does not exceed {max_count}: {count} (area: {to_str(area)}m²)')\n                else:\n                    space.ERROR(f'The number of {target_element[0]} in {target_space[0]} exceeds {max_count}: {count} (area: {to_str(area)}m²)')\n            else:\n                space.SUCCESS(f'Rule not applicable - {target_space[0]} area exceeds {max_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('patient treatment room', 'PATIENT TREATMENT ROOM')\n    target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n    max_area = 30.0\n    max_count = 4\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area <= max_area:\n                count = 0\n                for elem in space.SELECT('containing element'):\n                    if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                        count += 1\n                if count <= max_count:\n                    space.SUCCESS(f'The number of {target_element[0]} in {target_space[0]} does not exceed {max_count}: {count} (area: {to_str(area)}m²)')\n                else:\n                    space.ERROR(f'The number of {target_element[0]} in {target_space[0]} exceeds {max_count}: {count} (area: {to_str(area)}m²)')\n            else:\n                space.SUCCESS(f'Rule not applicable - {target_space[0]} area exceeds {max_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('patient treatment room', 'PATIENT TREATMENT ROOM')\n      target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n      max_area = 30.0\n      max_count = 4\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area <= max_area:\n                  count = 0\n                  for elem in space.SELECT('containing element'):\n                      if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n                          count += 1\n                  if count <= max_count:\n                      space.SUCCESS(f'The number of {target_element[0]} in {target_space[0]} does not exceed {max_count}: {count} (area: {to_str(area)}m²)')\n                  else:\n                      space.ERROR(f'The number of {target_element[0]} in {target_space[0]} exceeds {max_count}: {count} (area: {to_str(area)}m²)')\n              else:\n                  space.SUCCESS(f'Rule not applicable - {target_space[0]} area exceeds {max_area}m²: {to_str(area)}m²')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 43,
      "sentence": "The number of beds in a two-bed patient room shall not exceed 4.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.959,
        "ted": 0.971,
        "functional": 0.859
      },
      "is_valid": true,
      "processing_time": 0.315,
      "generated_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_equipment = ('bed', 'Cama-Hospital:0813 x 2083 mm')\n    max_count = 4\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            count = 0\n            for equip in space.SELECT('containing element'):\n                if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                    count += 1\n            if count <= max_count:\n                space.SUCCESS(f'The number of {target_equipment[0]} in {target_space[0]} does not exceed {max_count}: {count}')\n            else:\n                space.ERROR(f'The number of {target_equipment[0]} in {target_space[0]} exceeds {max_count}: {count}')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_equipment = ('bed', 'Cama-Hospital:0813 x 2083 mm')\n    max_count = 4\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            count = 0\n            for equip in space.SELECT('containing element'):\n                if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                    count += 1\n            if count <= max_count:\n                space.SUCCESS(f'The number of {target_equipment[0]} in {target_space[0]} does not exceed {max_count}: {count}')\n            else:\n                space.ERROR(f'The number of {target_equipment[0]} in {target_space[0]} exceeds {max_count}: {count}')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n      target_equipment = ('bed', 'Cama-Hospital:0813 x 2083 mm')\n      max_count = 4\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              count = 0\n              for equip in space.SELECT('containing element'):\n                  if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                      count += 1\n              if count <= max_count:\n                  space.SUCCESS(f'The number of {target_equipment[0]} in {target_space[0]} does not exceed {max_count}: {count}')\n              else:\n                  space.ERROR(f'The number of {target_equipment[0]} in {target_space[0]} exceeds {max_count}: {count}')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 44,
      "sentence": "The number of beds in a two-bed patient room and a single patient room shall not exceed 4 per room.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.964,
        "ted": 0.954,
        "functional": 0.851
      },
      "is_valid": true,
      "processing_time": 0.317,
      "generated_code": "def Check():\n    target_spaces = [\n        ('two-bed patient room', 'TWO-BED PATIENT ROOM'),\n        ('single patient room', 'SINGLE PATIENT ROOM')\n    ]\n    target_equipment = ('bed', 'Cama-Hospital:0813 x 2083 mm')\n    max_count = 4\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                count = 0\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                        count += 1\n                if count <= max_count:\n                    space.SUCCESS(f'The number of {target_equipment[0]} in {space_term} does not exceed {max_count}: {count}')\n                else:\n                    space.ERROR(f'The number of {target_equipment[0]} in {space_term} exceeds {max_count}: {count}')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')",
      "expected_code": "def Check():\n    target_spaces = [\n        ('two-bed patient room', 'TWO-BED PATIENT ROOM'),\n        ('single patient room', 'SINGLE PATIENT ROOM')\n    ]\n    target_equipment = ('bed', 'Cama-Hospital:0813 x 2083 mm')\n    max_count = 4\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                count = 0\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                        count += 1\n                if count <= max_count:\n                    space.SUCCESS(f'The number of {target_equipment[0]} in {space_term} does not exceed {max_count}: {count}')\n                else:\n                    space.ERROR(f'The number of {target_equipment[0]} in {space_term} exceeds {max_count}: {count}')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('two-bed patient room', 'TWO-BED PATIENT ROOM'),\n          ('single patient room', 'SINGLE PATIENT ROOM')\n      ]\n      target_equipment = ('bed', 'Cama-Hospital:0813 x 2083 mm')\n      max_count = 4\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for space_term, space_model in target_spaces:\n              if space_name == space_model:\n                  count = 0\n                  for equip in space.SELECT('containing element'):\n                      if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                          count += 1\n                  if count <= max_count:\n                      space.SUCCESS(f'The number of {target_equipment[0]} in {space_term} does not exceed {max_count}: {count}')\n                  else:\n                      space.ERROR(f'The number of {target_equipment[0]} in {space_term} exceeds {max_count}: {count}')\n      for space_term, space_model in target_spaces:\n          if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n              ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')"
    },
    {
      "sentence_id": 45,
      "sentence": "If the area of a two-bed patient room is 30 m² or less, the number of beds shall not exceed 4.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.952,
        "ted": 0.988,
        "functional": 0.829
      },
      "is_valid": true,
      "processing_time": 0.331,
      "generated_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_equipment = ('bed', 'Cama-Hospital:0813 x 2083 mm')\n    max_area = 30.0\n    max_count = 4\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area <= max_area:\n                count = 0\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                        count += 1\n                if count <= max_count:\n                    space.SUCCESS(f'The number of {target_equipment[0]} in {target_space[0]} does not exceed {max_count}: {count}')\n                else:\n                    space.ERROR(f'The number of {target_equipment[0]} in {target_space[0]} exceeds {max_count}: {count}')\n            else:\n                space.WARNING(f'The {target_space[0]} is larger than {max_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_equipment = ('bed', 'Cama-Hospital:0813 x 2083 mm')\n    max_area = 30.0\n    max_count = 4\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area <= max_area:\n                count = 0\n                for equip in space.SELECT('containing element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                        count += 1\n                if count <= max_count:\n                    space.SUCCESS(f'The number of {target_equipment[0]} in {target_space[0]} does not exceed {max_count}: {count}')\n                else:\n                    space.ERROR(f'The number of {target_equipment[0]} in {target_space[0]} exceeds {max_count}: {count}')\n            else:\n                space.WARNING(f'The {target_space[0]} is larger than {max_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n      target_equipment = ('bed', 'Cama-Hospital:0813 x 2083 mm')\n      max_area = 30.0\n      max_count = 4\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area <= max_area:\n                  count = 0\n                  for equip in space.SELECT('containing element'):\n                      if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n                          count += 1\n                  if count <= max_count:\n                      space.SUCCESS(f'The number of {target_equipment[0]} in {target_space[0]} does not exceed {max_count}: {count}')\n                  else:\n                      space.ERROR(f'The number of {target_equipment[0]} in {target_space[0]} exceeds {max_count}: {count}')\n              else:\n                  space.WARNING(f'The {target_space[0]} is larger than {max_area}m²: {to_str(area)}m²')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 46,
      "sentence": "A two-bed patient room shall be located on the second floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.985,
        "ted": 0.986,
        "functional": 0.895
      },
      "is_valid": true,
      "processing_time": 0.307,
      "generated_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_level = 'Second Floor'\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            level = space.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                space.SUCCESS(f'The {target_space[0]} is located on the {target_level}.')\n            else:\n                space.ERROR(f'The {target_space[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_level = 'Second Floor'\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            level = space.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                space.SUCCESS(f'The {target_space[0]} is located on the {target_level}.')\n            else:\n                space.ERROR(f'The {target_space[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n      target_level = 'Second Floor'\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              level = space.SELECT('my storey').SELECT('name').STRING()\n              if level == target_level:\n                  space.SUCCESS(f'The {target_space[0]} is located on the {target_level}.')\n              else:\n                  space.ERROR(f'The {target_space[0]} is not located on the {target_level}: current level is {level}.')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 47,
      "sentence": "Both a two-bed patient room and a single patient room shall be located on the second floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.956,
        "ted": 0.99,
        "functional": 0.843
      },
      "is_valid": true,
      "processing_time": 0.32,
      "generated_code": "def Check():\n    target_spaces = [\n        ('two-bed patient room', 'TWO-BED PATIENT ROOM'),\n        ('single patient room', 'SINGLE PATIENT ROOM')\n    ]\n    target_level = 'Second Floor'\n    for space_term, space_model in target_spaces:\n        found = False\n        for space in SELECT('space'):\n            if space.SELECT('name').STRING() == space_model:\n                found = True\n                level = space.SELECT('my storey').SELECT('name').STRING()\n                if level == target_level:\n                    space.SUCCESS(f'The {space_term} is located on the {target_level}.')\n                else:\n                    space.ERROR(f'The {space_term} is not located on the {target_level}: current level is {level}.')\n                break\n        if not found:\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')",
      "expected_code": "def Check():\n    target_spaces = [\n        ('two-bed patient room', 'TWO-BED PATIENT ROOM'),\n        ('single patient room', 'SINGLE PATIENT ROOM')\n    ]\n    target_level = 'Second Floor'\n    for space_term, space_model in target_spaces:\n        found = False\n        for space in SELECT('space'):\n            if space.SELECT('name').STRING() == space_model:\n                found = True\n                level = space.SELECT('my storey').SELECT('name').STRING()\n                if level == target_level:\n                    space.SUCCESS(f'The {space_term} is located on the {target_level}.')\n                else:\n                    space.ERROR(f'The {space_term} is not located on the {target_level}: current level is {level}.')\n                break\n        if not found:\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('two-bed patient room', 'TWO-BED PATIENT ROOM'),\n          ('single patient room', 'SINGLE PATIENT ROOM')\n      ]\n      target_level = 'Second Floor'\n      for space_term, space_model in target_spaces:\n          found = False\n          for space in SELECT('space'):\n              if space.SELECT('name').STRING() == space_model:\n                  found = True\n                  level = space.SELECT('my storey').SELECT('name').STRING()\n                  if level == target_level:\n                      space.SUCCESS(f'The {space_term} is located on the {target_level}.')\n                  else:\n                      space.ERROR(f'The {space_term} is not located on the {target_level}: current level is {level}.')\n                  break\n          if not found:\n              ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')"
    },
    {
      "sentence_id": 48,
      "sentence": "If there is only one two-bed patient room, it shall be located on the second floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.956,
        "ted": 0.981,
        "functional": 0.86
      },
      "is_valid": true,
      "processing_time": 0.334,
      "generated_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_level = 'Second Floor'\n    target_count = 1\n    matched_spaces = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            matched_spaces.append(space)\n    count = len(matched_spaces)\n    if count == target_count:\n        for space in matched_spaces:\n            level = space.SELECT('my storey').SELECT('name').STRING()\n            name = space.SELECT('name').STRING()\n            if level == target_level:\n                space.SUCCESS(f'The {name} is located on the {target_level}.')\n            else:\n                space.ERROR(f'The {name} is not located on the {target_level}: current level is {level}.')\n    else:\n        ROOT.WARNING(f'The number of {target_space[0]} is not {target_count}: {count}')",
      "expected_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_level = 'Second Floor'\n    target_count = 1\n    matched_spaces = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            matched_spaces.append(space)\n    count = len(matched_spaces)\n    if count == target_count:\n        for space in matched_spaces:\n            level = space.SELECT('my storey').SELECT('name').STRING()\n            name = space.SELECT('name').STRING()\n            if level == target_level:\n                space.SUCCESS(f'The {name} is located on the {target_level}.')\n            else:\n                space.ERROR(f'The {name} is not located on the {target_level}: current level is {level}.')\n    else:\n        ROOT.WARNING(f'The number of {target_space[0]} is not {target_count}: {count}')",
      "code_diff": "  def Check():\n      target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n      target_level = 'Second Floor'\n      target_count = 1\n      matched_spaces = []\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              matched_spaces.append(space)\n      count = len(matched_spaces)\n      if count == target_count:\n          for space in matched_spaces:\n              level = space.SELECT('my storey').SELECT('name').STRING()\n              name = space.SELECT('name').STRING()\n              if level == target_level:\n                  space.SUCCESS(f'The {name} is located on the {target_level}.')\n              else:\n                  space.ERROR(f'The {name} is not located on the {target_level}: current level is {level}.')\n      else:\n          ROOT.WARNING(f'The number of {target_space[0]} is not {target_count}: {count}')"
    },
    {
      "sentence_id": 49,
      "sentence": "A surgical department shall be located on the second floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.982,
        "ted": 0.966,
        "functional": 0.907
      },
      "is_valid": true,
      "processing_time": 0.31,
      "generated_code": "def Check():\n    target_zone = ('surgical department', 'Surgical Department')\n    target_level = 'Second Floor'\n    for zone in SELECT('space'):\n        if zone.SELECT('name').STRING() == target_zone[1]:\n            level = zone.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                zone.SUCCESS(f'The {target_zone[0]} is located on the {target_level}.')\n            else:\n                zone.ERROR(f'The {target_zone[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_zone[0]}({target_zone[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_zone = ('surgical department', 'Surgical Department')\n    target_level = 'Second Floor'\n    for zone in SELECT('space'):\n        if zone.SELECT('name').STRING() == target_zone[1]:\n            level = zone.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                zone.SUCCESS(f'The {target_zone[0]} is located on the {target_level}.')\n            else:\n                zone.ERROR(f'The {target_zone[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_zone[0]}({target_zone[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_zone = ('surgical department', 'Surgical Department')\n      target_level = 'Second Floor'\n      for zone in SELECT('space'):\n          if zone.SELECT('name').STRING() == target_zone[1]:\n              level = zone.SELECT('my storey').SELECT('name').STRING()\n              if level == target_level:\n                  zone.SUCCESS(f'The {target_zone[0]} is located on the {target_level}.')\n              else:\n                  zone.ERROR(f'The {target_zone[0]} is not located on the {target_level}: current level is {level}.')\n              return\n      ROOT.WARNING(f'{target_zone[0]}({target_zone[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 50,
      "sentence": "A surgical department shall be located on the second floor, and an outpatient clinic area shall be located on the first floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.955,
        "ted": 0.977,
        "functional": 0.85
      },
      "is_valid": true,
      "processing_time": 0.314,
      "generated_code": "def Check():\n    target_zones = [\n        ('surgical department', 'Surgical Department'),\n        ('outpatient clinic area', 'Outpatient Clinic Area')\n    ]\n    target_levels = ['Second Floor', 'First Floor']\n    for (zone_term, zone_model), target_level in zip(target_zones, target_levels):\n        found = False\n        for zone in SELECT('space'):\n            if zone.SELECT('name').STRING() == zone_model:\n                found = True\n                level = zone.SELECT('my storey').SELECT('name').STRING()\n                if level == target_level:\n                    zone.SUCCESS(f'The {zone_term} is located on the {target_level}.')\n                else:\n                    zone.ERROR(f'The {zone_term} is not located on the {target_level}: current level is {level}.')\n                break\n        if not found:\n            ROOT.WARNING(f'{zone_term}({zone_model}) NOT FOUND')",
      "expected_code": "def Check():\n    target_zones = [\n        ('surgical department', 'Surgical Department'),\n        ('outpatient clinic area', 'Outpatient Clinic Area')\n    ]\n    target_levels = ['Second Floor', 'First Floor']\n    for (zone_term, zone_model), target_level in zip(target_zones, target_levels):\n        found = False\n        for zone in SELECT('space'):\n            if zone.SELECT('name').STRING() == zone_model:\n                found = True\n                level = zone.SELECT('my storey').SELECT('name').STRING()\n                if level == target_level:\n                    zone.SUCCESS(f'The {zone_term} is located on the {target_level}.')\n                else:\n                    zone.ERROR(f'The {zone_term} is not located on the {target_level}: current level is {level}.')\n                break\n        if not found:\n            ROOT.WARNING(f'{zone_term}({zone_model}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_zones = [\n          ('surgical department', 'Surgical Department'),\n          ('outpatient clinic area', 'Outpatient Clinic Area')\n      ]\n      target_levels = ['Second Floor', 'First Floor']\n      for (zone_term, zone_model), target_level in zip(target_zones, target_levels):\n          found = False\n          for zone in SELECT('space'):\n              if zone.SELECT('name').STRING() == zone_model:\n                  found = True\n                  level = zone.SELECT('my storey').SELECT('name').STRING()\n                  if level == target_level:\n                      zone.SUCCESS(f'The {zone_term} is located on the {target_level}.')\n                  else:\n                      zone.ERROR(f'The {zone_term} is not located on the {target_level}: current level is {level}.')\n                  break\n          if not found:\n              ROOT.WARNING(f'{zone_term}({zone_model}) NOT FOUND')"
    },
    {
      "sentence_id": 51,
      "sentence": "If a surgical department is located on the second floor, an outpatient clinic area shall be located on the first floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.986,
        "ted": 0.955,
        "functional": 0.89
      },
      "is_valid": true,
      "processing_time": 0.316,
      "generated_code": "def Check():\n    check_zone = ('surgical department', 'Surgical Department')\n    check_level = 'Second Floor'\n    target_zone = ('outpatient clinic area', 'Outpatient Clinic Area')\n    target_level = 'First Floor'\n    for check in SELECT('space'):\n        if check.SELECT('name').STRING() == check_zone[1]:\n            level_check = check.SELECT('my storey').SELECT('name').STRING()\n            if level_check == check_level:\n                for zone in SELECT('space'):\n                    if zone.SELECT('name').STRING() == target_zone[1]:\n                        level = zone.SELECT('my storey').SELECT('name').STRING()\n                        if level == target_level:\n                            zone.SUCCESS(f'The {target_zone[0]} is located on the {target_level}.')\n                        else:\n                            zone.ERROR(f'The {target_zone[0]} is not located on the {target_level}: current level is {level}.')\n                        return\n                ROOT.WARNING(f'{target_zone[0]}({target_zone[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'{check_zone[0]} is not located on the {check_level}: current level is {level_check}.')\n            return\n    ROOT.WARNING(f'{check_zone[0]}({check_zone[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    check_zone = ('surgical department', 'Surgical Department')\n    check_level = 'Second Floor'\n    target_zone = ('outpatient clinic area', 'Outpatient Clinic Area')\n    target_level = 'First Floor'\n    for check in SELECT('space'):\n        if check.SELECT('name').STRING() == check_zone[1]:\n            level_check = check.SELECT('my storey').SELECT('name').STRING()\n            if level_check == check_level:\n                for zone in SELECT('space'):\n                    if zone.SELECT('name').STRING() == target_zone[1]:\n                        level = zone.SELECT('my storey').SELECT('name').STRING()\n                        if level == target_level:\n                            zone.SUCCESS(f'The {target_zone[0]} is located on the {target_level}.')\n                        else:\n                            zone.ERROR(f'The {target_zone[0]} is not located on the {target_level}: current level is {level}.')\n                        return\n                ROOT.WARNING(f'{target_zone[0]}({target_zone[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'{check_zone[0]} is not located on the {check_level}: current level is {level_check}.')\n            return\n    ROOT.WARNING(f'{check_zone[0]}({check_zone[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      check_zone = ('surgical department', 'Surgical Department')\n      check_level = 'Second Floor'\n      target_zone = ('outpatient clinic area', 'Outpatient Clinic Area')\n      target_level = 'First Floor'\n      for check in SELECT('space'):\n          if check.SELECT('name').STRING() == check_zone[1]:\n              level_check = check.SELECT('my storey').SELECT('name').STRING()\n              if level_check == check_level:\n                  for zone in SELECT('space'):\n                      if zone.SELECT('name').STRING() == target_zone[1]:\n                          level = zone.SELECT('my storey').SELECT('name').STRING()\n                          if level == target_level:\n                              zone.SUCCESS(f'The {target_zone[0]} is located on the {target_level}.')\n                          else:\n                              zone.ERROR(f'The {target_zone[0]} is not located on the {target_level}: current level is {level}.')\n                          return\n                  ROOT.WARNING(f'{target_zone[0]}({target_zone[1]}) NOT FOUND')\n              else:\n                  ROOT.WARNING(f'{check_zone[0]} is not located on the {check_level}: current level is {level_check}.')\n              return\n      ROOT.WARNING(f'{check_zone[0]}({check_zone[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 52,
      "sentence": "The main entrance shall be located on the first floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.988,
        "ted": 0.963,
        "functional": 0.896
      },
      "is_valid": true,
      "processing_time": 0.313,
      "generated_code": "def Check():\n    target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n    target_level = 'First Floor'\n    for elem in SELECT('element'):\n        if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n            level = elem.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                elem.SUCCESS(f'The {target_element[0]} is located on the {target_level}.')\n            else:\n                elem.ERROR(f'The {target_element[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n    target_level = 'First Floor'\n    for elem in SELECT('element'):\n        if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n            level = elem.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                elem.SUCCESS(f'The {target_element[0]} is located on the {target_level}.')\n            else:\n                elem.ERROR(f'The {target_element[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n      target_level = 'First Floor'\n      for elem in SELECT('element'):\n          if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n              level = elem.SELECT('my storey').SELECT('name').STRING()\n              if level == target_level:\n                  elem.SUCCESS(f'The {target_element[0]} is located on the {target_level}.')\n              else:\n                  elem.ERROR(f'The {target_element[0]} is not located on the {target_level}: current level is {level}.')\n              return\n      ROOT.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 53,
      "sentence": "Both the main entrance and the emergency room entrance shall be located on the first floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.983,
        "ted": 0.976,
        "functional": 0.843
      },
      "is_valid": true,
      "processing_time": 0.329,
      "generated_code": "def Check():\n    target_elements = [\n        ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)'),\n        ('emergency room entrance', 'Double, Flush (Metric):Type E1 -- PR 915mm x 2135mm (Steel, Solid)')\n    ]\n    target_level = 'First Floor'\n    for elem_term, elem_model in target_elements:\n        found = False\n        for elem in SELECT('element'):\n            if elem.SELECT('name').STRING().startswith(elem_model + ':'):\n                found = True\n                level = elem.SELECT('my storey').SELECT('name').STRING()\n                if level == target_level:\n                    elem.SUCCESS(f'The {elem_term} is located on the {target_level}.')\n                else:\n                    elem.ERROR(f'The {elem_term} is not located on the {target_level}: current level is {level}.')\n                break\n        if not found:\n            ROOT.WARNING(f'{elem_term}({elem_model}) NOT FOUND')",
      "expected_code": "def Check():\n    target_elements = [\n        ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)'),\n        ('emergency room entrance', 'Double, Flush (Metric):Type E1 -- PR 915mm x 2135mm (Steel, Solid)')\n    ]\n    target_level = 'First Floor'\n    for elem_term, elem_model in target_elements:\n        found = False\n        for elem in SELECT('element'):\n            if elem.SELECT('name').STRING().startswith(elem_model + ':'):\n                found = True\n                level = elem.SELECT('my storey').SELECT('name').STRING()\n                if level == target_level:\n                    elem.SUCCESS(f'The {elem_term} is located on the {target_level}.')\n                else:\n                    elem.ERROR(f'The {elem_term} is not located on the {target_level}: current level is {level}.')\n                break\n        if not found:\n            ROOT.WARNING(f'{elem_term}({elem_model}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_elements = [\n          ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)'),\n          ('emergency room entrance', 'Double, Flush (Metric):Type E1 -- PR 915mm x 2135mm (Steel, Solid)')\n      ]\n      target_level = 'First Floor'\n      for elem_term, elem_model in target_elements:\n          found = False\n          for elem in SELECT('element'):\n              if elem.SELECT('name').STRING().startswith(elem_model + ':'):\n                  found = True\n                  level = elem.SELECT('my storey').SELECT('name').STRING()\n                  if level == target_level:\n                      elem.SUCCESS(f'The {elem_term} is located on the {target_level}.')\n                  else:\n                      elem.ERROR(f'The {elem_term} is not located on the {target_level}: current level is {level}.')\n                  break\n          if not found:\n              ROOT.WARNING(f'{elem_term}({elem_model}) NOT FOUND')"
    },
    {
      "sentence_id": 54,
      "sentence": "If there is only one main entrance, it shall be located on the first floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.975,
        "ted": 0.952,
        "functional": 0.86
      },
      "is_valid": true,
      "processing_time": 0.31,
      "generated_code": "def Check():\n    target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n    target_level = 'First Floor'\n    target_count = 1\n    matched_elements = []\n    for elem in SELECT('element'):\n        if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n            matched_elements.append(elem)\n    count = len(matched_elements)\n    if count == target_count:\n        for elem in matched_elements:\n            level = elem.SELECT('my storey').SELECT('name').STRING()\n            name = elem.SELECT('name').STRING()\n            if level == target_level:\n                elem.SUCCESS(f'The {name} is located on the {target_level}.')\n            else:\n                elem.ERROR(f'The {name} is not located on the {target_level}: current level is {level}.')\n    else:\n        ROOT.WARNING(f'The number of {target_element[0]} is not {target_count}: {count}')",
      "expected_code": "def Check():\n    target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n    target_level = 'First Floor'\n    target_count = 1\n    matched_elements = []\n    for elem in SELECT('element'):\n        if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n            matched_elements.append(elem)\n    count = len(matched_elements)\n    if count == target_count:\n        for elem in matched_elements:\n            level = elem.SELECT('my storey').SELECT('name').STRING()\n            name = elem.SELECT('name').STRING()\n            if level == target_level:\n                elem.SUCCESS(f'The {name} is located on the {target_level}.')\n            else:\n                elem.ERROR(f'The {name} is not located on the {target_level}: current level is {level}.')\n    else:\n        ROOT.WARNING(f'The number of {target_element[0]} is not {target_count}: {count}')",
      "code_diff": "  def Check():\n      target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n      target_level = 'First Floor'\n      target_count = 1\n      matched_elements = []\n      for elem in SELECT('element'):\n          if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n              matched_elements.append(elem)\n      count = len(matched_elements)\n      if count == target_count:\n          for elem in matched_elements:\n              level = elem.SELECT('my storey').SELECT('name').STRING()\n              name = elem.SELECT('name').STRING()\n              if level == target_level:\n                  elem.SUCCESS(f'The {name} is located on the {target_level}.')\n              else:\n                  elem.ERROR(f'The {name} is not located on the {target_level}: current level is {level}.')\n      else:\n          ROOT.WARNING(f'The number of {target_element[0]} is not {target_count}: {count}')"
    },
    {
      "sentence_id": 55,
      "sentence": "MRI equipment shall be located on the first floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.955,
        "ted": 0.961,
        "functional": 0.899
      },
      "is_valid": true,
      "processing_time": 0.314,
      "generated_code": "def Check():\n    target_equipment = ('MRI equipment', 'MRI:MRI')\n    target_level = 'First Floor'\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n            level = equip.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                equip.SUCCESS(f'The {target_equipment[0]} is located on the {target_level}.')\n            else:\n                equip.ERROR(f'The {target_equipment[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_equipment = ('MRI equipment', 'MRI:MRI')\n    target_level = 'First Floor'\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n            level = equip.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                equip.SUCCESS(f'The {target_equipment[0]} is located on the {target_level}.')\n            else:\n                equip.ERROR(f'The {target_equipment[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_equipment = ('MRI equipment', 'MRI:MRI')\n      target_level = 'First Floor'\n      for equip in SELECT('element'):\n          if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n              level = equip.SELECT('my storey').SELECT('name').STRING()\n              if level == target_level:\n                  equip.SUCCESS(f'The {target_equipment[0]} is located on the {target_level}.')\n              else:\n                  equip.ERROR(f'The {target_equipment[0]} is not located on the {target_level}: current level is {level}.')\n              return\n      ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 56,
      "sentence": "Both MRI and X-RAY equipment shall be located on the first floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.957,
        "ted": 0.953,
        "functional": 0.844
      },
      "is_valid": true,
      "processing_time": 0.316,
      "generated_code": "def Check():\n    target_equipments = [\n        ('MRI equipment', 'MRI:MRI'),\n        ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    ]\n    target_level = 'First Floor'\n    for equip_term, equip_model in target_equipments:\n        found = False\n        for equip in SELECT('element'):\n            if equip.SELECT('name').STRING().startswith(equip_model + ':'):\n                found = True\n                level = equip.SELECT('my storey').SELECT('name').STRING()\n                if level == target_level:\n                    equip.SUCCESS(f'The {equip_term} is located on the {target_level}.')\n                else:\n                    equip.ERROR(f'The {equip_term} is not located on the {target_level}: current level is {level}.')\n                break\n        if not found:\n            ROOT.WARNING(f'{equip_term}({equip_model}) NOT FOUND')",
      "expected_code": "def Check():\n    target_equipments = [\n        ('MRI equipment', 'MRI:MRI'),\n        ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    ]\n    target_level = 'First Floor'\n    for equip_term, equip_model in target_equipments:\n        found = False\n        for equip in SELECT('element'):\n            if equip.SELECT('name').STRING().startswith(equip_model + ':'):\n                found = True\n                level = equip.SELECT('my storey').SELECT('name').STRING()\n                if level == target_level:\n                    equip.SUCCESS(f'The {equip_term} is located on the {target_level}.')\n                else:\n                    equip.ERROR(f'The {equip_term} is not located on the {target_level}: current level is {level}.')\n                break\n        if not found:\n            ROOT.WARNING(f'{equip_term}({equip_model}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_equipments = [\n          ('MRI equipment', 'MRI:MRI'),\n          ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n      ]\n      target_level = 'First Floor'\n      for equip_term, equip_model in target_equipments:\n          found = False\n          for equip in SELECT('element'):\n              if equip.SELECT('name').STRING().startswith(equip_model + ':'):\n                  found = True\n                  level = equip.SELECT('my storey').SELECT('name').STRING()\n                  if level == target_level:\n                      equip.SUCCESS(f'The {equip_term} is located on the {target_level}.')\n                  else:\n                      equip.ERROR(f'The {equip_term} is not located on the {target_level}: current level is {level}.')\n                  break\n          if not found:\n              ROOT.WARNING(f'{equip_term}({equip_model}) NOT FOUND')"
    },
    {
      "sentence_id": 57,
      "sentence": "If there is only one MRI equipment, it shall be located on the first floor.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.965,
        "ted": 0.969,
        "functional": 0.863
      },
      "is_valid": true,
      "processing_time": 0.312,
      "generated_code": "def Check():\n    target_equipment = ('MRI equipment', 'MRI:MRI')\n    target_level = 'First Floor'\n    target_count = 1\n    matched_equipments = []\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n            matched_equipments.append(equip)\n    count = len(matched_equipments)\n    if count == target_count:\n        for equip in matched_equipments:\n            level = equip.SELECT('my storey').SELECT('name').STRING()\n            name = equip.SELECT('name').STRING()\n            if level == target_level:\n                equip.SUCCESS(f'The {name} is located on the {target_level}.')\n            else:\n                equip.ERROR(f'The {name} is not located on the {target_level}: current level is {level}.')\n    else:\n        ROOT.WARNING(f'The number of {target_equipment[0]} is not {target_count}: {count}')",
      "expected_code": "def Check():\n    target_equipment = ('MRI equipment', 'MRI:MRI')\n    target_level = 'First Floor'\n    target_count = 1\n    matched_equipments = []\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n            matched_equipments.append(equip)\n    count = len(matched_equipments)\n    if count == target_count:\n        for equip in matched_equipments:\n            level = equip.SELECT('my storey').SELECT('name').STRING()\n            name = equip.SELECT('name').STRING()\n            if level == target_level:\n                equip.SUCCESS(f'The {name} is located on the {target_level}.')\n            else:\n                equip.ERROR(f'The {name} is not located on the {target_level}: current level is {level}.')\n    else:\n        ROOT.WARNING(f'The number of {target_equipment[0]} is not {target_count}: {count}')",
      "code_diff": "  def Check():\n      target_equipment = ('MRI equipment', 'MRI:MRI')\n      target_level = 'First Floor'\n      target_count = 1\n      matched_equipments = []\n      for equip in SELECT('element'):\n          if equip.SELECT('name').STRING().startswith(target_equipment[1] + ':'):\n              matched_equipments.append(equip)\n      count = len(matched_equipments)\n      if count == target_count:\n          for equip in matched_equipments:\n              level = equip.SELECT('my storey').SELECT('name').STRING()\n              name = equip.SELECT('name').STRING()\n              if level == target_level:\n                  equip.SUCCESS(f'The {name} is located on the {target_level}.')\n              else:\n                  equip.ERROR(f'The {name} is not located on the {target_level}: current level is {level}.')\n      else:\n          ROOT.WARNING(f'The number of {target_equipment[0]} is not {target_count}: {count}')"
    },
    {
      "sentence_id": 58,
      "sentence": "An operating room and a recovery room shall be located within 15 meters of each other.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.973,
        "ted": 0.97,
        "functional": 0.867
      },
      "is_valid": true,
      "processing_time": 0.315,
      "generated_code": "def Check():\n    target_space_1 = ('operating room', 'OPERATING ROOM')\n    target_space_2 = ('recovery room', 'RECOVERY ROOM')\n    max_distance = 15.0\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space_1[1]:\n            space_1 = space\n        elif space.SELECT('name').STRING() == target_space_2[1]:\n            space_2 = space\n    if space_1 is None:\n        ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n        return\n    if space_2 is None:\n        ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n        return\n    distance = space_1.SELECT('distance', space_2).UNIT('m').NUMBER()\n    if distance <= max_distance:\n        space_1.SUCCESS(f'The distance between {target_space_1[0]} and {target_space_2[0]} does not exceed {max_distance}m: {to_str(distance)}m')\n    else:\n        space_1.ERROR(f'The distance between {target_space_1[0]} and {target_space_2[0]} exceeds {max_distance}m: {to_str(distance)}m')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space_1 = ('operating room', 'OPERATING ROOM')\n    target_space_2 = ('recovery room', 'RECOVERY ROOM')\n    max_distance = 15.0\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space_1[1]:\n            space_1 = space\n        elif space.SELECT('name').STRING() == target_space_2[1]:\n            space_2 = space\n    if space_1 is None:\n        ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n        return\n    if space_2 is None:\n        ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n        return\n    distance = space_1.SELECT('distance', space_2).UNIT('m').NUMBER()\n    if distance <= max_distance:\n        space_1.SUCCESS(f'The distance between {target_space_1[0]} and {target_space_2[0]} does not exceed {max_distance}m: {to_str(distance)}m')\n    else:\n        space_1.ERROR(f'The distance between {target_space_1[0]} and {target_space_2[0]} exceeds {max_distance}m: {to_str(distance)}m')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space_1 = ('operating room', 'OPERATING ROOM')\n      target_space_2 = ('recovery room', 'RECOVERY ROOM')\n      max_distance = 15.0\n      space_1 = None\n      space_2 = None\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space_1[1]:\n              space_1 = space\n          elif space.SELECT('name').STRING() == target_space_2[1]:\n              space_2 = space\n      if space_1 is None:\n          ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n          return\n      if space_2 is None:\n          ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n          return\n      distance = space_1.SELECT('distance', space_2).UNIT('m').NUMBER()\n      if distance <= max_distance:\n          space_1.SUCCESS(f'The distance between {target_space_1[0]} and {target_space_2[0]} does not exceed {max_distance}m: {to_str(distance)}m')\n      else:\n          space_1.ERROR(f'The distance between {target_space_1[0]} and {target_space_2[0]} exceeds {max_distance}m: {to_str(distance)}m')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 59,
      "sentence": "An operating room shall be located within 15 meters of both a recovery room and a medication preparation area.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.95,
        "ted": 0.974,
        "functional": 0.857
      },
      "is_valid": true,
      "processing_time": 0.303,
      "generated_code": "def Check():\n    ROOT.SUCCESS('Basic compliance check completed')",
      "expected_code": "def Check():\n    ROOT.SUCCESS('Basic compliance check completed')",
      "code_diff": "  def Check():\n      ROOT.SUCCESS('Basic compliance check completed')"
    },
    {
      "sentence_id": 60,
      "sentence": "If the site area is 5,000 m² or larger, an operating room and a recovery room shall be located within 15 meters of each other.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.989,
        "ted": 0.972,
        "functional": 0.836
      },
      "is_valid": true,
      "processing_time": 0.315,
      "generated_code": "def Check():\n    check_site = ('site', 'Toposolid:Site')\n    check_min_area = 5000.0\n    target_space_1 = ('operating room', 'OPERATING ROOM')\n    target_space_2 = ('recovery room', 'RECOVERY ROOM')\n    max_distance = 15.0\n    space_1 = None\n    space_2 = None\n    for check in SELECT('proxy'):\n        if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space_1[1]:\n                        space_1 = space\n                    elif space.SELECT('name').STRING() == target_space_2[1]:\n                        space_2 = space\n                if space_1 is None:\n                    ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n                    return\n                if space_2 is None:\n                    ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n                    return\n                distance = space_1.SELECT('distance', space_2).UNIT('m').NUMBER()\n                if distance <= max_distance:\n                    space_1.SUCCESS(f'The distance between {target_space_1[0]} and {target_space_2[0]} does not exceed {max_distance}m: {to_str(distance)}m')\n                else:\n                    space_1.ERROR(f'The distance between {target_space_1[0]} and {target_space_2[0]} exceeds {max_distance}m: {to_str(distance)}m')\n            else:\n                ROOT.WARNING(f'The {check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    check_site = ('site', 'Toposolid:Site')\n    check_min_area = 5000.0\n    target_space_1 = ('operating room', 'OPERATING ROOM')\n    target_space_2 = ('recovery room', 'RECOVERY ROOM')\n    max_distance = 15.0\n    space_1 = None\n    space_2 = None\n    for check in SELECT('proxy'):\n        if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space_1[1]:\n                        space_1 = space\n                    elif space.SELECT('name').STRING() == target_space_2[1]:\n                        space_2 = space\n                if space_1 is None:\n                    ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n                    return\n                if space_2 is None:\n                    ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n                    return\n                distance = space_1.SELECT('distance', space_2).UNIT('m').NUMBER()\n                if distance <= max_distance:\n                    space_1.SUCCESS(f'The distance between {target_space_1[0]} and {target_space_2[0]} does not exceed {max_distance}m: {to_str(distance)}m')\n                else:\n                    space_1.ERROR(f'The distance between {target_space_1[0]} and {target_space_2[0]} exceeds {max_distance}m: {to_str(distance)}m')\n            else:\n                ROOT.WARNING(f'The {check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      check_site = ('site', 'Toposolid:Site')\n      check_min_area = 5000.0\n      target_space_1 = ('operating room', 'OPERATING ROOM')\n      target_space_2 = ('recovery room', 'RECOVERY ROOM')\n      max_distance = 15.0\n      space_1 = None\n      space_2 = None\n      for check in SELECT('proxy'):\n          if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n              area_check = check.SELECT('area').UNIT('m2').NUMBER()\n              if area_check >= check_min_area:\n                  for space in SELECT('space'):\n                      if space.SELECT('name').STRING() == target_space_1[1]:\n                          space_1 = space\n                      elif space.SELECT('name').STRING() == target_space_2[1]:\n                          space_2 = space\n                  if space_1 is None:\n                      ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n                      return\n                  if space_2 is None:\n                      ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n                      return\n                  distance = space_1.SELECT('distance', space_2).UNIT('m').NUMBER()\n                  if distance <= max_distance:\n                      space_1.SUCCESS(f'The distance between {target_space_1[0]} and {target_space_2[0]} does not exceed {max_distance}m: {to_str(distance)}m')\n                  else:\n                      space_1.ERROR(f'The distance between {target_space_1[0]} and {target_space_2[0]} exceeds {max_distance}m: {to_str(distance)}m')\n              else:\n                  ROOT.WARNING(f'The {check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n              return\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 61,
      "sentence": "The spacing between structural columns in a two-bed patient room shall be at least 3.6 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.967,
        "ted": 0.97,
        "functional": 0.835
      },
      "is_valid": true,
      "processing_time": 0.312,
      "generated_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n    min_distance = 3.6\n    elements = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for elem in space.SELECT('containing element'):\n                if elem.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                    elements.append(elem)\n                    if len(elements) == 2:\n                        break\n            distance = elements[0].SELECT('distance', elements[1]).UNIT('m').NUMBER()\n            if distance >= min_distance:\n                space.SUCCESS(f'The distance between {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n            else:\n                space.ERROR(f'The distance between {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n    min_distance = 3.6\n    elements = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for elem in space.SELECT('containing element'):\n                if elem.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                    elements.append(elem)\n                    if len(elements) == 2:\n                        break\n            distance = elements[0].SELECT('distance', elements[1]).UNIT('m').NUMBER()\n            if distance >= min_distance:\n                space.SUCCESS(f'The distance between {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n            else:\n                space.ERROR(f'The distance between {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n      target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n      min_distance = 3.6\n      elements = []\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              for elem in space.SELECT('containing element'):\n                  if elem.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                      elements.append(elem)\n                      if len(elements) == 2:\n                          break\n              distance = elements[0].SELECT('distance', elements[1]).UNIT('m').NUMBER()\n              if distance >= min_distance:\n                  space.SUCCESS(f'The distance between {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n              else:\n                  space.ERROR(f'The distance between {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 62,
      "sentence": "In a two-bed patient room, both the spacing between structural columns and the spacing between structural columns and doors shall be at least 3.6 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.958,
        "ted": 0.975,
        "functional": 0.828
      },
      "is_valid": true,
      "processing_time": 0.316,
      "generated_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_elements = [\n        ('structural column', 'BIMINONE_RoundColumn:D450mm'),\n        ('door', 'Sliding Door:Steel Sliding Door')\n    ]\n    min_distance = 3.6\n    elements = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for elem in space.SELECT('containing element'):\n                for elem_term, elem_model in target_elements:\n                    if elem.SELECT('name').STRING().startswith(elem_model + ':'):\n                        elements.append((elem_term, elem))\n            count = len(elements)\n            for i in range(count):\n                for j in range(i + 1, count):\n                    term_i, elem_i = elements[i]\n                    term_j, elem_j = elements[j]\n                    distance = elem_i.SELECT('distance', elem_j).UNIT('m').NUMBER()\n                    if distance >= min_distance:\n                        space.SUCCESS(\n                            f\"The distance between {term_i} and {term_j} in {target_space[0]} is at least {min_distance}m: {to_str(distance)}m\"\n                        )\n                    else:\n                        space.ERROR(\n                            f\"The distance between {term_i} and {term_j} in {target_space[0]} is less than {min_distance}m: {to_str(distance)}m\"\n                        )\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_elements = [\n        ('structural column', 'BIMINONE_RoundColumn:D450mm'),\n        ('door', 'Sliding Door:Steel Sliding Door')\n    ]\n    min_distance = 3.6\n    elements = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for elem in space.SELECT('containing element'):\n                for elem_term, elem_model in target_elements:\n                    if elem.SELECT('name').STRING().startswith(elem_model + ':'):\n                        elements.append((elem_term, elem))\n            count = len(elements)\n            for i in range(count):\n                for j in range(i + 1, count):\n                    term_i, elem_i = elements[i]\n                    term_j, elem_j = elements[j]\n                    distance = elem_i.SELECT('distance', elem_j).UNIT('m').NUMBER()\n                    if distance >= min_distance:\n                        space.SUCCESS(\n                            f\"The distance between {term_i} and {term_j} in {target_space[0]} is at least {min_distance}m: {to_str(distance)}m\"\n                        )\n                    else:\n                        space.ERROR(\n                            f\"The distance between {term_i} and {term_j} in {target_space[0]} is less than {min_distance}m: {to_str(distance)}m\"\n                        )\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n      target_elements = [\n          ('structural column', 'BIMINONE_RoundColumn:D450mm'),\n          ('door', 'Sliding Door:Steel Sliding Door')\n      ]\n      min_distance = 3.6\n      elements = []\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              for elem in space.SELECT('containing element'):\n                  for elem_term, elem_model in target_elements:\n                      if elem.SELECT('name').STRING().startswith(elem_model + ':'):\n                          elements.append((elem_term, elem))\n              count = len(elements)\n              for i in range(count):\n                  for j in range(i + 1, count):\n                      term_i, elem_i = elements[i]\n                      term_j, elem_j = elements[j]\n                      distance = elem_i.SELECT('distance', elem_j).UNIT('m').NUMBER()\n                      if distance >= min_distance:\n                          space.SUCCESS(\n                              f\"The distance between {term_i} and {term_j} in {target_space[0]} is at least {min_distance}m: {to_str(distance)}m\"\n                          )\n                      else:\n                          space.ERROR(\n                              f\"The distance between {term_i} and {term_j} in {target_space[0]} is less than {min_distance}m: {to_str(distance)}m\"\n                          )\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 63,
      "sentence": "If there are two structural columns in a two-bed patient room, the spacing between them shall be at least 3.6 meters.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.986,
        "ted": 0.953,
        "functional": 0.837
      },
      "is_valid": true,
      "processing_time": 0.316,
      "generated_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n    min_distance = 3.6\n    target_count = 2\n    elements = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for elem in space.SELECT('containing element'):\n                if elem.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                    elements.append(elem)\n            if len(elements) == target_count:\n                distance = elements[0].SELECT('distance', elements[1]).UNIT('m').NUMBER()\n                if distance >= min_distance:\n                    space.SUCCESS(f'The distance between {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n                else:\n                    space.ERROR(f'The distance between {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n            else:\n                ROOT.WARNING(f'The number of {target_element[0]} in {target_space[0]} is not {target_count}: {len(elements)}')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n    target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n    min_distance = 3.6\n    target_count = 2\n    elements = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for elem in space.SELECT('containing element'):\n                if elem.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                    elements.append(elem)\n            if len(elements) == target_count:\n                distance = elements[0].SELECT('distance', elements[1]).UNIT('m').NUMBER()\n                if distance >= min_distance:\n                    space.SUCCESS(f'The distance between {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n                else:\n                    space.ERROR(f'The distance between {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n            else:\n                ROOT.WARNING(f'The number of {target_element[0]} in {target_space[0]} is not {target_count}: {len(elements)}')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('two-bed patient room', 'TWO-BED PATIENT ROOM')\n      target_element = ('structural column', 'BIMINONE_RoundColumn:D450mm')\n      min_distance = 3.6\n      target_count = 2\n      elements = []\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              for elem in space.SELECT('containing element'):\n                  if elem.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                      elements.append(elem)\n              if len(elements) == target_count:\n                  distance = elements[0].SELECT('distance', elements[1]).UNIT('m').NUMBER()\n                  if distance >= min_distance:\n                      space.SUCCESS(f'The distance between {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n                  else:\n                      space.ERROR(f'The distance between {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n              else:\n                  ROOT.WARNING(f'The number of {target_element[0]} in {target_space[0]} is not {target_count}: {len(elements)}')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 64,
      "sentence": "In an X-RAY room, X-RAY equipment shall maintain a clearance of 0.9 meters from door.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.973,
        "ted": 0.983,
        "functional": 0.831
      },
      "is_valid": true,
      "processing_time": 0.337,
      "generated_code": "def Check():\n    target_space = ('X-RAY room', 'X-RAY ROOM')\n    target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    target_element = ('door', 'Single, Flush (Metric):Type A -- 915mm x 2135mm (Wood, Solid)')\n    min_distance = 0.9\n    equipment = None\n    element = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for equip in space.SELECT('containing element'):\n                if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                    equipment = equip\n                elif equip.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                    element = equip\n            if equipment is None or element is None:\n                ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) 또는 {target_element[0]}({target_element[1]}) NOT FOUND')\n                return\n            distance = equipment.SELECT('distance', element).UNIT('m').NUMBER()\n            if distance >= min_distance:\n                space.SUCCESS(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n            else:\n                space.ERROR(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('X-RAY room', 'X-RAY ROOM')\n    target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    target_element = ('door', 'Single, Flush (Metric):Type A -- 915mm x 2135mm (Wood, Solid)')\n    min_distance = 0.9\n    equipment = None\n    element = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for equip in space.SELECT('containing element'):\n                if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                    equipment = equip\n                elif equip.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                    element = equip\n            if equipment is None or element is None:\n                ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) 또는 {target_element[0]}({target_element[1]}) NOT FOUND')\n                return\n            distance = equipment.SELECT('distance', element).UNIT('m').NUMBER()\n            if distance >= min_distance:\n                space.SUCCESS(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n            else:\n                space.ERROR(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('X-RAY room', 'X-RAY ROOM')\n      target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n      target_element = ('door', 'Single, Flush (Metric):Type A -- 915mm x 2135mm (Wood, Solid)')\n      min_distance = 0.9\n      equipment = None\n      element = None\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              for equip in space.SELECT('containing element'):\n                  if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                      equipment = equip\n                  elif equip.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                      element = equip\n              if equipment is None or element is None:\n                  ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) 또는 {target_element[0]}({target_element[1]}) NOT FOUND')\n                  return\n              distance = equipment.SELECT('distance', element).UNIT('m').NUMBER()\n              if distance >= min_distance:\n                  space.SUCCESS(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n              else:\n                  space.ERROR(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 65,
      "sentence": "In an X-RAY room, X-RAY equipment shall maintain a clearance of 0.9 meters from all adjacent walls.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.951,
        "ted": 0.968,
        "functional": 0.822
      },
      "is_valid": true,
      "processing_time": 0.321,
      "generated_code": "def Check():\n    target_space = ('X-RAY room', 'X-RAY ROOM')\n    target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    target_element = ('wall', 'Basic Wall:Interior - Partition (92mm Stud)')\n    min_distance = 0.9\n    equipment = None\n    elements = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for equip in space.SELECT('containing element'):\n                if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                    equipment = equip\n                elif equip.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                    elements.append(equip)\n            if equipment is None:\n                ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n                return\n            if not elements:\n                ROOT.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n                return\n            for i in range (len(elements)):\n                distance = equipment.SELECT('distance', elements[i]).UNIT('m').NUMBER()\n            if distance >= min_distance:\n                space.SUCCESS(f'The distance between {target_equipment[0]} and {target_element[0]}[{i+1}] in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n            else:\n                space.ERROR(f'The distance between {target_equipment[0]} and {target_element[0]}[{i+1}] in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space = ('X-RAY room', 'X-RAY ROOM')\n    target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    target_element = ('wall', 'Basic Wall:Interior - Partition (92mm Stud)')\n    min_distance = 0.9\n    equipment = None\n    elements = []\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            for equip in space.SELECT('containing element'):\n                if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                    equipment = equip\n                elif equip.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                    elements.append(equip)\n            if equipment is None:\n                ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n                return\n            if not elements:\n                ROOT.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n                return\n            for i in range (len(elements)):\n                distance = equipment.SELECT('distance', elements[i]).UNIT('m').NUMBER()\n            if distance >= min_distance:\n                space.SUCCESS(f'The distance between {target_equipment[0]} and {target_element[0]}[{i+1}] in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n            else:\n                space.ERROR(f'The distance between {target_equipment[0]} and {target_element[0]}[{i+1}] in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space = ('X-RAY room', 'X-RAY ROOM')\n      target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n      target_element = ('wall', 'Basic Wall:Interior - Partition (92mm Stud)')\n      min_distance = 0.9\n      equipment = None\n      elements = []\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              for equip in space.SELECT('containing element'):\n                  if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                      equipment = equip\n                  elif equip.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                      elements.append(equip)\n              if equipment is None:\n                  ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n                  return\n              if not elements:\n                  ROOT.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')\n                  return\n              for i in range (len(elements)):\n                  distance = equipment.SELECT('distance', elements[i]).UNIT('m').NUMBER()\n              if distance >= min_distance:\n                  space.SUCCESS(f'The distance between {target_equipment[0]} and {target_element[0]}[{i+1}] in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n              else:\n                  space.ERROR(f'The distance between {target_equipment[0]} and {target_element[0]}[{i+1}] in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 66,
      "sentence": "If the site area is 5,000 m² or larger, X-RAY equipment shall maintain a clearance of 0.9 meters from door.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.967,
        "ted": 0.968,
        "functional": 0.816
      },
      "is_valid": true,
      "processing_time": 0.323,
      "generated_code": "def Check():\n    check_site = ('site', 'Toposolid:Site')\n    check_min_area = 5000.0\n    target_space = ('X-RAY room', 'X-RAY ROOM')\n    target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    target_element = ('door', 'Single, Flush (Metric):Type A -- 915mm x 2135mm (Wood, Solid)')\n    min_distance = 0.9\n    equipment = None\n    element = None\n    for check in SELECT('proxy'):\n        if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space[1]:\n                        for equip in space.SELECT('containing element'):\n                            if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                                equipment = equip\n                            elif equip.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                                element = equip\n                        if equipment is None or element is None:\n                            ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) 또는 {target_element[0]}({target_element[1]}) NOT FOUND')\n                            return\n                        distance = equipment.SELECT('distance', element).UNIT('m').NUMBER()\n                        if distance >= min_distance:\n                            space.SUCCESS(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n                        else:\n                            space.ERROR(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n                ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'The {check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    check_site = ('site', 'Toposolid:Site')\n    check_min_area = 5000.0\n    target_space = ('X-RAY room', 'X-RAY ROOM')\n    target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    target_element = ('door', 'Single, Flush (Metric):Type A -- 915mm x 2135mm (Wood, Solid)')\n    min_distance = 0.9\n    equipment = None\n    element = None\n    for check in SELECT('proxy'):\n        if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space[1]:\n                        for equip in space.SELECT('containing element'):\n                            if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                                equipment = equip\n                            elif equip.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                                element = equip\n                        if equipment is None or element is None:\n                            ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) 또는 {target_element[0]}({target_element[1]}) NOT FOUND')\n                            return\n                        distance = equipment.SELECT('distance', element).UNIT('m').NUMBER()\n                        if distance >= min_distance:\n                            space.SUCCESS(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n                        else:\n                            space.ERROR(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n                ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'The {check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      check_site = ('site', 'Toposolid:Site')\n      check_min_area = 5000.0\n      target_space = ('X-RAY room', 'X-RAY ROOM')\n      target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n      target_element = ('door', 'Single, Flush (Metric):Type A -- 915mm x 2135mm (Wood, Solid)')\n      min_distance = 0.9\n      equipment = None\n      element = None\n      for check in SELECT('proxy'):\n          if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n              area_check = check.SELECT('area').UNIT('m2').NUMBER()\n              if area_check >= check_min_area:\n                  for space in SELECT('space'):\n                      if space.SELECT('name').STRING() == target_space[1]:\n                          for equip in space.SELECT('containing element'):\n                              if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                                  equipment = equip\n                              elif equip.SELECT('name').STRING().startswith(target_element[1]+ ':'):\n                                  element = equip\n                          if equipment is None or element is None:\n                              ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) 또는 {target_element[0]}({target_element[1]}) NOT FOUND')\n                              return\n                          distance = equipment.SELECT('distance', element).UNIT('m').NUMBER()\n                          if distance >= min_distance:\n                              space.SUCCESS(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is at least {min_distance}m: {to_str(distance)}m')\n                          else:\n                              space.ERROR(f'The distance between {target_equipment[0]} and {target_element[0]} in {target_space} is less than {min_distance}m: {to_str(distance)}m')\n                  ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')\n              else:\n                  ROOT.WARNING(f'The {check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n              return\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 67,
      "sentence": "X-ray equipment shall be free of obstructions within 2 meters around it.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.988,
        "ted": 0.957,
        "functional": 0.836
      },
      "is_valid": true,
      "processing_time": 0.317,
      "generated_code": "def Check():\n    target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    radius = 2.0\n    elements = []\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n            for elem in SELECT('element'):\n                if elem.SELECT('element id').STRING() == equip.SELECT('element id').STRING():\n                    continue\n                distance = equip.SELECT('distance', elem).UNIT('m').NUMBER()\n                if distance < radius:\n                    elements.append(elem)\n            if len(elements) == 0:\n                equip.SUCCESS(f'There are no obstructions within {radius}m radius of {target_equipment[0]}.')\n            else:\n                equip.ERROR(f'There are obstructions within {radius}m radius of {target_equipment[0]}.')\n            return\n    ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    radius = 2.0\n    elements = []\n    for equip in SELECT('element'):\n        if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n            for elem in SELECT('element'):\n                if elem.SELECT('element id').STRING() == equip.SELECT('element id').STRING():\n                    continue\n                distance = equip.SELECT('distance', elem).UNIT('m').NUMBER()\n                if distance < radius:\n                    elements.append(elem)\n            if len(elements) == 0:\n                equip.SUCCESS(f'There are no obstructions within {radius}m radius of {target_equipment[0]}.')\n            else:\n                equip.ERROR(f'There are obstructions within {radius}m radius of {target_equipment[0]}.')\n            return\n    ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n      radius = 2.0\n      elements = []\n      for equip in SELECT('element'):\n          if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n              for elem in SELECT('element'):\n                  if elem.SELECT('element id').STRING() == equip.SELECT('element id').STRING():\n                      continue\n                  distance = equip.SELECT('distance', elem).UNIT('m').NUMBER()\n                  if distance < radius:\n                      elements.append(elem)\n              if len(elements) == 0:\n                  equip.SUCCESS(f'There are no obstructions within {radius}m radius of {target_equipment[0]}.')\n              else:\n                  equip.ERROR(f'There are obstructions within {radius}m radius of {target_equipment[0]}.')\n              return\n      ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 68,
      "sentence": "X-ray equipment and MRI equipment shall be free of obstructions within 2 meters around them.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.989,
        "ted": 0.968,
        "functional": 0.815
      },
      "is_valid": true,
      "processing_time": 0.313,
      "generated_code": "def Check():\n    target_equipments = [\n        ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray'),\n        ('MRI equipment', 'MRI:MRI')\n    ]\n    radius = 2.0\n    elements = []\n    for equip_term, equip_model in target_equipments:\n        found = False\n        for equip in SELECT('element'):\n            if equip.SELECT('name').STRING().startswith(equip_model+ ':'):\n                found = True\n                for elem in SELECT('element'):\n                    if elem.SELECT('element id').STRING() == equip.SELECT('element id').STRING():\n                        continue\n                    distance = equip.SELECT('distance', elem).UNIT('m').NUMBER()\n                    if distance < radius:\n                        elements.append(elem)\n                if len(elements) == 0:\n                    equip.SUCCESS(f'There are no obstructions within {radius}m radius of {equip_term}.')\n                else:\n                    equip.ERROR(f'There are obstructions within {radius}m radius of {equip_term}.')\n        if not found:\n            ROOT.WARNING(f'{equip_term}({equip_model}) NOT FOUND')",
      "expected_code": "def Check():\n    target_equipments = [\n        ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray'),\n        ('MRI equipment', 'MRI:MRI')\n    ]\n    radius = 2.0\n    elements = []\n    for equip_term, equip_model in target_equipments:\n        found = False\n        for equip in SELECT('element'):\n            if equip.SELECT('name').STRING().startswith(equip_model+ ':'):\n                found = True\n                for elem in SELECT('element'):\n                    if elem.SELECT('element id').STRING() == equip.SELECT('element id').STRING():\n                        continue\n                    distance = equip.SELECT('distance', elem).UNIT('m').NUMBER()\n                    if distance < radius:\n                        elements.append(elem)\n                if len(elements) == 0:\n                    equip.SUCCESS(f'There are no obstructions within {radius}m radius of {equip_term}.')\n                else:\n                    equip.ERROR(f'There are obstructions within {radius}m radius of {equip_term}.')\n        if not found:\n            ROOT.WARNING(f'{equip_term}({equip_model}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_equipments = [\n          ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray'),\n          ('MRI equipment', 'MRI:MRI')\n      ]\n      radius = 2.0\n      elements = []\n      for equip_term, equip_model in target_equipments:\n          found = False\n          for equip in SELECT('element'):\n              if equip.SELECT('name').STRING().startswith(equip_model+ ':'):\n                  found = True\n                  for elem in SELECT('element'):\n                      if elem.SELECT('element id').STRING() == equip.SELECT('element id').STRING():\n                          continue\n                      distance = equip.SELECT('distance', elem).UNIT('m').NUMBER()\n                      if distance < radius:\n                          elements.append(elem)\n                  if len(elements) == 0:\n                      equip.SUCCESS(f'There are no obstructions within {radius}m radius of {equip_term}.')\n                  else:\n                      equip.ERROR(f'There are obstructions within {radius}m radius of {equip_term}.')\n          if not found:\n              ROOT.WARNING(f'{equip_term}({equip_model}) NOT FOUND')"
    },
    {
      "sentence_id": 69,
      "sentence": "If the site area is 1,000 m² or more, X-ray equipment shall be free of obstructions within 2 meters around it.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.974,
        "ted": 0.981,
        "functional": 0.813
      },
      "is_valid": true,
      "processing_time": 0.334,
      "generated_code": "def Check():\n    check_site = ('site', 'Toposolid:Site')\n    check_min_area = 1000.0\n    target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    radius = 2.0\n    elements = []\n    for check in SELECT('proxy'):\n        if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                for equip in SELECT('element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                        for elem in SELECT('element'):\n                            if elem.SELECT('element id').STRING() == equip.SELECT('element id').STRING():\n                                continue\n                            distance = equip.SELECT('distance', elem).UNIT('m').NUMBER()\n                            if distance < radius:\n                                elements.append(elem)\n                        if len(elements) == 0:\n                            equip.SUCCESS(f'There are no obstructions within {radius}m radius of {target_equipment[0]}.')\n                        else:\n                            equip.ERROR(f'There are obstructions within {radius}m radius of {target_equipment[0]}.')\n                        return\n                    ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'The {check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    check_site = ('site', 'Toposolid:Site')\n    check_min_area = 1000.0\n    target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n    radius = 2.0\n    elements = []\n    for check in SELECT('proxy'):\n        if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check >= check_min_area:\n                for equip in SELECT('element'):\n                    if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                        for elem in SELECT('element'):\n                            if elem.SELECT('element id').STRING() == equip.SELECT('element id').STRING():\n                                continue\n                            distance = equip.SELECT('distance', elem).UNIT('m').NUMBER()\n                            if distance < radius:\n                                elements.append(elem)\n                        if len(elements) == 0:\n                            equip.SUCCESS(f'There are no obstructions within {radius}m radius of {target_equipment[0]}.')\n                        else:\n                            equip.ERROR(f'There are obstructions within {radius}m radius of {target_equipment[0]}.')\n                        return\n                    ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'The {check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      check_site = ('site', 'Toposolid:Site')\n      check_min_area = 1000.0\n      target_equipment = ('X-RAY equipment', 'X8501 - Simulator, Therapy, X-Ray:X8501 - Simulator, Therapy, X-Ray')\n      radius = 2.0\n      elements = []\n      for check in SELECT('proxy'):\n          if check.SELECT('name').STRING().startswith(check_site[1]+':'):\n              area_check = check.SELECT('area').UNIT('m2').NUMBER()\n              if area_check >= check_min_area:\n                  for equip in SELECT('element'):\n                      if equip.SELECT('name').STRING().startswith(target_equipment[1]+ ':'):\n                          for elem in SELECT('element'):\n                              if elem.SELECT('element id').STRING() == equip.SELECT('element id').STRING():\n                                  continue\n                              distance = equip.SELECT('distance', elem).UNIT('m').NUMBER()\n                              if distance < radius:\n                                  elements.append(elem)\n                          if len(elements) == 0:\n                              equip.SUCCESS(f'There are no obstructions within {radius}m radius of {target_equipment[0]}.')\n                          else:\n                              equip.ERROR(f'There are obstructions within {radius}m radius of {target_equipment[0]}.')\n                          return\n                      ROOT.WARNING(f'{target_equipment[0]}({target_equipment[1]}) NOT FOUND')\n              else:\n                  ROOT.WARNING(f'The {check_site[0]} is smaller than {check_min_area}m²: {to_str(area_check)}m²')\n              return\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 70,
      "sentence": "Offices shall be designated for staff use.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.968,
        "ted": 0.957,
        "functional": 0.9
      },
      "is_valid": true,
      "processing_time": 0.318,
      "generated_code": "def Check():\n    target_space = ('office', 'OFFICE')\n    target_occupation = 'staff'\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            occupation = space.SELECT('prop', '1_Occupied').STRING()\n            if occupation.lower() == target_occupation.lower():\n                space.SUCCESS(f'The {target_space[0]} is occupied by {target_occupation}.')\n            else:\n                space.ERROR(f'The {target_space[0]} is not occupied by {target_occupation}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_space = ('office', 'OFFICE')\n    target_occupation = 'staff'\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            occupation = space.SELECT('prop', '1_Occupied').STRING()\n            if occupation.lower() == target_occupation.lower():\n                space.SUCCESS(f'The {target_space[0]} is occupied by {target_occupation}.')\n            else:\n                space.ERROR(f'The {target_space[0]} is not occupied by {target_occupation}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_space = ('office', 'OFFICE')\n      target_occupation = 'staff'\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              occupation = space.SELECT('prop', '1_Occupied').STRING()\n              if occupation.lower() == target_occupation.lower():\n                  space.SUCCESS(f'The {target_space[0]} is occupied by {target_occupation}.')\n              else:\n                  space.ERROR(f'The {target_space[0]} is not occupied by {target_occupation}.')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 71,
      "sentence": "Offices and administrative areas shall be designated for staff use.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.964,
        "ted": 0.978,
        "functional": 0.883
      },
      "is_valid": true,
      "processing_time": 0.324,
      "generated_code": "def Check():\n    target_spaces = [\n        ('office', 'OFFICE'),\n        ('administrative area', 'ADMINISTRATIVE AREA')\n    ]\n    target_occupation = 'staff'\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                occupation = space.SELECT('prop', '1_Occupied').STRING()\n                if occupation.lower() == target_occupation.lower():\n                    space.SUCCESS(f'The {space_term} is occupied by {target_occupation}.')\n                else:\n                    space.ERROR(f'The {space_term} is not occupied by {target_occupation}.')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')",
      "expected_code": "def Check():\n    target_spaces = [\n        ('office', 'OFFICE'),\n        ('administrative area', 'ADMINISTRATIVE AREA')\n    ]\n    target_occupation = 'staff'\n    for space in SELECT('space'):\n        space_name = space.SELECT('name').STRING()\n        for space_term, space_model in target_spaces:\n            if space_name == space_model:\n                occupation = space.SELECT('prop', '1_Occupied').STRING()\n                if occupation.lower() == target_occupation.lower():\n                    space.SUCCESS(f'The {space_term} is occupied by {target_occupation}.')\n                else:\n                    space.ERROR(f'The {space_term} is not occupied by {target_occupation}.')\n    for space_term, space_model in target_spaces:\n        if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n            ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_spaces = [\n          ('office', 'OFFICE'),\n          ('administrative area', 'ADMINISTRATIVE AREA')\n      ]\n      target_occupation = 'staff'\n      for space in SELECT('space'):\n          space_name = space.SELECT('name').STRING()\n          for space_term, space_model in target_spaces:\n              if space_name == space_model:\n                  occupation = space.SELECT('prop', '1_Occupied').STRING()\n                  if occupation.lower() == target_occupation.lower():\n                      space.SUCCESS(f'The {space_term} is occupied by {target_occupation}.')\n                  else:\n                      space.ERROR(f'The {space_term} is not occupied by {target_occupation}.')\n      for space_term, space_model in target_spaces:\n          if not any(space.SELECT('name').STRING() == space_model for space in SELECT('space')):\n              ROOT.WARNING(f'{space_term}({space_model}) NOT FOUND')"
    },
    {
      "sentence_id": 72,
      "sentence": "If an office is located on the second floor, it shall be designated for staff use.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.963,
        "ted": 0.965,
        "functional": 0.87
      },
      "is_valid": true,
      "processing_time": 0.319,
      "generated_code": "def Check():\n    target_space = ('office', 'OFFICE')\n    target_occupation = 'staff'\n    target_level = 'Second Floor'\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            level = space.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                occupation = space.SELECT('prop', '1_Occupied').STRING()\n                if occupation.lower() == target_occupation.lower():\n                    space.SUCCESS(f'The {target_space[0]} is occupied by {target_occupation}.')\n                else:\n                    space.ERROR(f'The {target_space[0]} is not occupied by {target_occupation}.')\n            else:\n                space.WARNING(f'The {target_space[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_space = ('office', 'OFFICE')\n    target_occupation = 'staff'\n    target_level = 'Second Floor'\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space[1]:\n            level = space.SELECT('my storey').SELECT('name').STRING()\n            if level == target_level:\n                occupation = space.SELECT('prop', '1_Occupied').STRING()\n                if occupation.lower() == target_occupation.lower():\n                    space.SUCCESS(f'The {target_space[0]} is occupied by {target_occupation}.')\n                else:\n                    space.ERROR(f'The {target_space[0]} is not occupied by {target_occupation}.')\n            else:\n                space.WARNING(f'The {target_space[0]} is not located on the {target_level}: current level is {level}.')\n            return\n    ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_space = ('office', 'OFFICE')\n      target_occupation = 'staff'\n      target_level = 'Second Floor'\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space[1]:\n              level = space.SELECT('my storey').SELECT('name').STRING()\n              if level == target_level:\n                  occupation = space.SELECT('prop', '1_Occupied').STRING()\n                  if occupation.lower() == target_occupation.lower():\n                      space.SUCCESS(f'The {target_space[0]} is occupied by {target_occupation}.')\n                  else:\n                      space.ERROR(f'The {target_space[0]} is not occupied by {target_occupation}.')\n              else:\n                  space.WARNING(f'The {target_space[0]} is not located on the {target_level}: current level is {level}.')\n              return\n      ROOT.WARNING(f'{target_space[0]}({target_space[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 73,
      "sentence": "The main entrance shall face the exterior.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.956,
        "ted": 0.978,
        "functional": 0.963
      },
      "is_valid": true,
      "processing_time": 0.317,
      "generated_code": "def Check():\n    target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n    for elem in SELECT('element'):\n        if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n            if elem.SELECT('is external').BOOL():\n                elem.SUCCESS(f'The {target_element[0]} faces the exterior.')\n            else:\n                elem.ERROR(f'The {target_element[0]} does not face the exterior.')\n            return\n    ROOT.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n    for elem in SELECT('element'):\n        if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n            if elem.SELECT('is external').BOOL():\n                elem.SUCCESS(f'The {target_element[0]} faces the exterior.')\n            else:\n                elem.ERROR(f'The {target_element[0]} does not face the exterior.')\n            return\n    ROOT.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n      for elem in SELECT('element'):\n          if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n              if elem.SELECT('is external').BOOL():\n                  elem.SUCCESS(f'The {target_element[0]} faces the exterior.')\n              else:\n                  elem.ERROR(f'The {target_element[0]} does not face the exterior.')\n              return\n      ROOT.WARNING(f'{target_element[0]}({target_element[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 74,
      "sentence": "Both the main entrance and the emergency room entrance shall face the exterior.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.984,
        "ted": 0.983,
        "functional": 0.865
      },
      "is_valid": true,
      "processing_time": 0.324,
      "generated_code": "def Check():\n    target_elements = [\n        ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)'),\n        ('emergency room entrance', 'Double, Flush (Metric):Type E1 -- PR 915mm x 2135mm (Steel, Solid)')\n    ]\n    for elem_term, elem_model in target_elements:\n        found = False\n        for elem in SELECT('element'):\n            if elem.SELECT('name').STRING().startswith(elem_model + ':'):\n                found = True\n                if elem.SELECT('is external').BOOL():\n                    elem.SUCCESS(f'The {elem_term} faces the exterior.')\n                else:\n                    elem.ERROR(f'The {elem_term} does not face the exterior.')\n                break\n        if not found:\n            ROOT.WARNING(f'{elem_term}({elem_model}) NOT FOUND')",
      "expected_code": "def Check():\n    target_elements = [\n        ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)'),\n        ('emergency room entrance', 'Double, Flush (Metric):Type E1 -- PR 915mm x 2135mm (Steel, Solid)')\n    ]\n    for elem_term, elem_model in target_elements:\n        found = False\n        for elem in SELECT('element'):\n            if elem.SELECT('name').STRING().startswith(elem_model + ':'):\n                found = True\n                if elem.SELECT('is external').BOOL():\n                    elem.SUCCESS(f'The {elem_term} faces the exterior.')\n                else:\n                    elem.ERROR(f'The {elem_term} does not face the exterior.')\n                break\n        if not found:\n            ROOT.WARNING(f'{elem_term}({elem_model}) NOT FOUND')",
      "code_diff": "  def Check():\n      target_elements = [\n          ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)'),\n          ('emergency room entrance', 'Double, Flush (Metric):Type E1 -- PR 915mm x 2135mm (Steel, Solid)')\n      ]\n      for elem_term, elem_model in target_elements:\n          found = False\n          for elem in SELECT('element'):\n              if elem.SELECT('name').STRING().startswith(elem_model + ':'):\n                  found = True\n                  if elem.SELECT('is external').BOOL():\n                      elem.SUCCESS(f'The {elem_term} faces the exterior.')\n                  else:\n                      elem.ERROR(f'The {elem_term} does not face the exterior.')\n                  break\n          if not found:\n              ROOT.WARNING(f'{elem_term}({elem_model}) NOT FOUND')"
    },
    {
      "sentence_id": 75,
      "sentence": "If there is only one main entrance, it shall face the exterior.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.959,
        "ted": 0.952,
        "functional": 0.859
      },
      "is_valid": true,
      "processing_time": 0.309,
      "generated_code": "def Check():\n    target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n    target_count = 1\n    matched_elements = []\n    for elem in SELECT('element'):\n        if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n            matched_elements.append(elem)\n    count = len(matched_elements)\n    if count == target_count:\n        for elem in matched_elements:\n            name = elem.SELECT('name').STRING()\n            if elem.SELECT('is external').BOOL():\n                elem.SUCCESS(f'The {target_element[0]} faces the exterior.')\n            else:\n                elem.ERROR(f'The {target_element[0]} does not face the exterior.')\n    else:\n        ROOT.WARNING(f'The number of {target_element[0]} is not {target_count}: {count}')",
      "expected_code": "def Check():\n    target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n    target_count = 1\n    matched_elements = []\n    for elem in SELECT('element'):\n        if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n            matched_elements.append(elem)\n    count = len(matched_elements)\n    if count == target_count:\n        for elem in matched_elements:\n            name = elem.SELECT('name').STRING()\n            if elem.SELECT('is external').BOOL():\n                elem.SUCCESS(f'The {target_element[0]} faces the exterior.')\n            else:\n                elem.ERROR(f'The {target_element[0]} does not face the exterior.')\n    else:\n        ROOT.WARNING(f'The number of {target_element[0]} is not {target_count}: {count}')",
      "code_diff": "  def Check():\n      target_element = ('main entrance', 'M_Curtain Wall Dbl Glass:Type H -- PR 915mm x 2135mm (Glass)')\n      target_count = 1\n      matched_elements = []\n      for elem in SELECT('element'):\n          if elem.SELECT('name').STRING().startswith(target_element[1] + ':'):\n              matched_elements.append(elem)\n      count = len(matched_elements)\n      if count == target_count:\n          for elem in matched_elements:\n              name = elem.SELECT('name').STRING()\n              if elem.SELECT('is external').BOOL():\n                  elem.SUCCESS(f'The {target_element[0]} faces the exterior.')\n              else:\n                  elem.ERROR(f'The {target_element[0]} does not face the exterior.')\n      else:\n          ROOT.WARNING(f'The number of {target_element[0]} is not {target_count}: {count}')"
    },
    {
      "sentence_id": 76,
      "sentence": "A delivery room shall have access to an operating room.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.979,
        "ted": 0.974,
        "functional": 0.915
      },
      "is_valid": true,
      "processing_time": 0.313,
      "generated_code": "def Check():\n    target_space_1 = ('delivery room', 'DELIVERY ROOM')\n    target_space_2 = ('operating room', 'OPERATING ROOM')\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space_1[1]:\n            space_1 = space\n        elif space.SELECT('name').STRING() == target_space_2[1]:\n            space_2 = space\n    if space_1 is None:\n        ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n    elif space_2 is None:\n        ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n        return\n    accessible_spaces = space_1.SELECT('passable space recursive')\n    if any(space_2.SELECT('element id').STRING() == accessible.SELECT('element id').STRING() for accessible in accessible_spaces):\n        ROOT.SUCCESS(f'The {target_space_2[0]} is accessible from the {target_space_1[0]}.')\n    else:\n        ROOT.ERROR(f'The {target_space_2[0]} is not accessible from the {target_space_1[0]}.')",
      "expected_code": "def Check():\n    target_space_1 = ('delivery room', 'DELIVERY ROOM')\n    target_space_2 = ('operating room', 'OPERATING ROOM')\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space_1[1]:\n            space_1 = space\n        elif space.SELECT('name').STRING() == target_space_2[1]:\n            space_2 = space\n    if space_1 is None:\n        ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n    elif space_2 is None:\n        ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n        return\n    accessible_spaces = space_1.SELECT('passable space recursive')\n    if any(space_2.SELECT('element id').STRING() == accessible.SELECT('element id').STRING() for accessible in accessible_spaces):\n        ROOT.SUCCESS(f'The {target_space_2[0]} is accessible from the {target_space_1[0]}.')\n    else:\n        ROOT.ERROR(f'The {target_space_2[0]} is not accessible from the {target_space_1[0]}.')",
      "code_diff": "  def Check():\n      target_space_1 = ('delivery room', 'DELIVERY ROOM')\n      target_space_2 = ('operating room', 'OPERATING ROOM')\n      space_1 = None\n      space_2 = None\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space_1[1]:\n              space_1 = space\n          elif space.SELECT('name').STRING() == target_space_2[1]:\n              space_2 = space\n      if space_1 is None:\n          ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n      elif space_2 is None:\n          ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n          return\n      accessible_spaces = space_1.SELECT('passable space recursive')\n      if any(space_2.SELECT('element id').STRING() == accessible.SELECT('element id').STRING() for accessible in accessible_spaces):\n          ROOT.SUCCESS(f'The {target_space_2[0]} is accessible from the {target_space_1[0]}.')\n      else:\n          ROOT.ERROR(f'The {target_space_2[0]} is not accessible from the {target_space_1[0]}.')"
    },
    {
      "sentence_id": 77,
      "sentence": "A delivery room shall have access to an operating room and a cesarean delivery room.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.985,
        "ted": 0.962,
        "functional": 0.857
      },
      "is_valid": true,
      "processing_time": 0.289,
      "generated_code": "def Check():\n    ROOT.SUCCESS('Basic compliance check completed')",
      "expected_code": "def Check():\n    ROOT.SUCCESS('Basic compliance check completed')",
      "code_diff": "  def Check():\n      ROOT.SUCCESS('Basic compliance check completed')"
    },
    {
      "sentence_id": 78,
      "sentence": "If the area of a delivery room is 100 m² or more, it shall have access to an operating room.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.952,
        "ted": 0.982,
        "functional": 0.834
      },
      "is_valid": true,
      "processing_time": 0.323,
      "generated_code": "def Check():\n    target_space_1 = ('delivery room', 'DELIVERY ROOM')\n    target_space_2 = ('operating room', 'OPERATING ROOM')\n    min_area = 100.0\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space_1[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                space_1 = space\n                found = False\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space_2[1]:\n                        space_2 = space\n                        found = True\n                        accessible_spaces = space_1.SELECT('passable space recursive')\n                        if any(space_2.SELECT('element id').STRING() == accessible.SELECT('element id').STRING() for accessible in accessible_spaces):\n                            ROOT.SUCCESS(f'The {target_space_2[0]} is accessible from the {target_space_1[0]}.')\n                        else:\n                            ROOT.ERROR(f'The {target_space_2[0]} is not accessible from the {target_space_1[0]}.')\n                if not found:\n                    ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'The {target_space_1[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    target_space_1 = ('delivery room', 'DELIVERY ROOM')\n    target_space_2 = ('operating room', 'OPERATING ROOM')\n    min_area = 100.0\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space_1[1]:\n            area = space.SELECT('area').UNIT('m2').NUMBER()\n            if area >= min_area:\n                space_1 = space\n                found = False\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space_2[1]:\n                        space_2 = space\n                        found = True\n                        accessible_spaces = space_1.SELECT('passable space recursive')\n                        if any(space_2.SELECT('element id').STRING() == accessible.SELECT('element id').STRING() for accessible in accessible_spaces):\n                            ROOT.SUCCESS(f'The {target_space_2[0]} is accessible from the {target_space_1[0]}.')\n                        else:\n                            ROOT.ERROR(f'The {target_space_2[0]} is not accessible from the {target_space_1[0]}.')\n                if not found:\n                    ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n            else:\n                ROOT.WARNING(f'The {target_space_1[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n            return\n    ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      target_space_1 = ('delivery room', 'DELIVERY ROOM')\n      target_space_2 = ('operating room', 'OPERATING ROOM')\n      min_area = 100.0\n      space_1 = None\n      space_2 = None\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space_1[1]:\n              area = space.SELECT('area').UNIT('m2').NUMBER()\n              if area >= min_area:\n                  space_1 = space\n                  found = False\n                  for space in SELECT('space'):\n                      if space.SELECT('name').STRING() == target_space_2[1]:\n                          space_2 = space\n                          found = True\n                          accessible_spaces = space_1.SELECT('passable space recursive')\n                          if any(space_2.SELECT('element id').STRING() == accessible.SELECT('element id').STRING() for accessible in accessible_spaces):\n                              ROOT.SUCCESS(f'The {target_space_2[0]} is accessible from the {target_space_1[0]}.')\n                          else:\n                              ROOT.ERROR(f'The {target_space_2[0]} is not accessible from the {target_space_1[0]}.')\n                  if not found:\n                      ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n              else:\n                  ROOT.WARNING(f'The {target_space_1[0]} is smaller than {min_area}m²: {to_str(area)}m²')\n              return\n      ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    },
    {
      "sentence_id": 79,
      "sentence": "A physician on-call room and an intensive care unit and shall be adjacent to each other.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.966,
        "ted": 0.972,
        "functional": 0.912
      },
      "is_valid": true,
      "processing_time": 0.334,
      "generated_code": "def Check():\n    target_space_1 = ('physician on-call room', 'PHYSICIAN ON-CALL ROOM')\n    target_space_2 = ('intensive care unit', 'INTENSIVE CARE UNIT')\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space_1[1]:\n            space_1 = space\n        elif space.SELECT('name').STRING() == target_space_2[1]:\n            space_2 = space\n    if space_1 is None:\n        ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n    elif space_2 is None:\n        ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n        return\n    adjacent_spaces = space_1.SELECT('adjacent room')\n    if any(space_2.SELECT('element id').STRING() == adjacent.SELECT('element id').STRING() for adjacent in adjacent_spaces):\n        ROOT.SUCCESS(f'The {target_space_1[0]} is adjacent to the {target_space_2[0]}.')\n    else:\n        ROOT.ERROR(f'The {target_space_1[0]} is not adjacent to the {target_space_2[0]}.')",
      "expected_code": "def Check():\n    target_space_1 = ('physician on-call room', 'PHYSICIAN ON-CALL ROOM')\n    target_space_2 = ('intensive care unit', 'INTENSIVE CARE UNIT')\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space_1[1]:\n            space_1 = space\n        elif space.SELECT('name').STRING() == target_space_2[1]:\n            space_2 = space\n    if space_1 is None:\n        ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n    elif space_2 is None:\n        ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n        return\n    adjacent_spaces = space_1.SELECT('adjacent room')\n    if any(space_2.SELECT('element id').STRING() == adjacent.SELECT('element id').STRING() for adjacent in adjacent_spaces):\n        ROOT.SUCCESS(f'The {target_space_1[0]} is adjacent to the {target_space_2[0]}.')\n    else:\n        ROOT.ERROR(f'The {target_space_1[0]} is not adjacent to the {target_space_2[0]}.')",
      "code_diff": "  def Check():\n      target_space_1 = ('physician on-call room', 'PHYSICIAN ON-CALL ROOM')\n      target_space_2 = ('intensive care unit', 'INTENSIVE CARE UNIT')\n      space_1 = None\n      space_2 = None\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space_1[1]:\n              space_1 = space\n          elif space.SELECT('name').STRING() == target_space_2[1]:\n              space_2 = space\n      if space_1 is None:\n          ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n      elif space_2 is None:\n          ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n          return\n      adjacent_spaces = space_1.SELECT('adjacent room')\n      if any(space_2.SELECT('element id').STRING() == adjacent.SELECT('element id').STRING() for adjacent in adjacent_spaces):\n          ROOT.SUCCESS(f'The {target_space_1[0]} is adjacent to the {target_space_2[0]}.')\n      else:\n          ROOT.ERROR(f'The {target_space_1[0]} is not adjacent to the {target_space_2[0]}.')"
    },
    {
      "sentence_id": 80,
      "sentence": "A physician on-call room shall be adjacent to both an intensive care unit and an emergency department.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.967,
        "ted": 0.953,
        "functional": 0.857
      },
      "is_valid": true,
      "processing_time": 0.293,
      "generated_code": "def Check():\n    ROOT.SUCCESS('Basic compliance check completed')",
      "expected_code": "def Check():\n    ROOT.SUCCESS('Basic compliance check completed')",
      "code_diff": "  def Check():\n      ROOT.SUCCESS('Basic compliance check completed')"
    },
    {
      "sentence_id": 81,
      "sentence": "If there is an emergency department, A physician on-call room and an intensive care unit and shall be adjacent to each other.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.964,
        "ted": 0.977,
        "functional": 0.911
      },
      "is_valid": true,
      "processing_time": 0.319,
      "generated_code": "def Check():\n    check_space = ('emergency department', 'Emergency Department')\n    target_space_1 = ('physician on-call room', 'PHYSICIAN ON-CALL ROOM')\n    target_space_2 = ('intensive care unit', 'INTENSIVE CARE UNIT')\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == check_space[1]:\n            for space in SELECT('space'):\n                if space.SELECT('name').STRING() == target_space_1[1]:\n                    space_1 = space\n                elif space.SELECT('name').STRING() == target_space_2[1]:\n                    space_2 = space\n            if space_1 is None:\n                ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n            elif space_2 is None:\n                ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n                return\n            adjacent_spaces = space_1.SELECT('adjacent room')\n            if any(space_2.SELECT('element id').STRING() == adjacent.SELECT('element id').STRING() for adjacent in adjacent_spaces):\n                ROOT.SUCCESS(f'The {target_space_1[0]} is adjacent to the {target_space_2[0]}.')\n            else:\n                ROOT.ERROR(f'The {target_space_1[0]} is not adjacent to the {target_space_2[0]}.')\n            return\n    ROOT.WARNING(f'{check_space[0]}({check_space[1]}) NOT FOUND')",
      "expected_code": "def Check():\n    check_space = ('emergency department', 'Emergency Department')\n    target_space_1 = ('physician on-call room', 'PHYSICIAN ON-CALL ROOM')\n    target_space_2 = ('intensive care unit', 'INTENSIVE CARE UNIT')\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == check_space[1]:\n            for space in SELECT('space'):\n                if space.SELECT('name').STRING() == target_space_1[1]:\n                    space_1 = space\n                elif space.SELECT('name').STRING() == target_space_2[1]:\n                    space_2 = space\n            if space_1 is None:\n                ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n            elif space_2 is None:\n                ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n                return\n            adjacent_spaces = space_1.SELECT('adjacent room')\n            if any(space_2.SELECT('element id').STRING() == adjacent.SELECT('element id').STRING() for adjacent in adjacent_spaces):\n                ROOT.SUCCESS(f'The {target_space_1[0]} is adjacent to the {target_space_2[0]}.')\n            else:\n                ROOT.ERROR(f'The {target_space_1[0]} is not adjacent to the {target_space_2[0]}.')\n            return\n    ROOT.WARNING(f'{check_space[0]}({check_space[1]}) NOT FOUND')",
      "code_diff": "  def Check():\n      check_space = ('emergency department', 'Emergency Department')\n      target_space_1 = ('physician on-call room', 'PHYSICIAN ON-CALL ROOM')\n      target_space_2 = ('intensive care unit', 'INTENSIVE CARE UNIT')\n      space_1 = None\n      space_2 = None\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == check_space[1]:\n              for space in SELECT('space'):\n                  if space.SELECT('name').STRING() == target_space_1[1]:\n                      space_1 = space\n                  elif space.SELECT('name').STRING() == target_space_2[1]:\n                      space_2 = space\n              if space_1 is None:\n                  ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n              elif space_2 is None:\n                  ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n                  return\n              adjacent_spaces = space_1.SELECT('adjacent room')\n              if any(space_2.SELECT('element id').STRING() == adjacent.SELECT('element id').STRING() for adjacent in adjacent_spaces):\n                  ROOT.SUCCESS(f'The {target_space_1[0]} is adjacent to the {target_space_2[0]}.')\n              else:\n                  ROOT.ERROR(f'The {target_space_1[0]} is not adjacent to the {target_space_2[0]}.')\n              return\n      ROOT.WARNING(f'{check_space[0]}({check_space[1]}) NOT FOUND')"
    },
    {
      "sentence_id": 82,
      "sentence": "A blood collection area shall be visible from a nurse station.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.974,
        "ted": 0.952,
        "functional": 0.885
      },
      "is_valid": true,
      "processing_time": 0.311,
      "generated_code": "def Check():\n    target_space_1 = ('nurse station', 'NURSE STATION')\n    target_space_2 = ('blood collection area', 'BLOOD COLLECTION AREA')\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space_1[1]:\n            space_1 = space\n        elif space.SELECT('name').STRING() == target_space_2[1]:\n            space_2 = space\n    if space_1 is None:\n        ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n    elif space_2 is None:\n        ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n        return\n    view = space_1.SELECT('distance', space_2)\n    if view.SELECT('is view clear').BOOL():\n        ROOT.SUCCESS(f'The {target_space_2[0]} is visible from the {target_space_1[0]}.')\n    else:\n        ROOT.ERROR(f'The {target_space_2[0]} is not visible from the {target_space_1[0]}.')",
      "expected_code": "def Check():\n    target_space_1 = ('nurse station', 'NURSE STATION')\n    target_space_2 = ('blood collection area', 'BLOOD COLLECTION AREA')\n    space_1 = None\n    space_2 = None\n    for space in SELECT('space'):\n        if space.SELECT('name').STRING() == target_space_1[1]:\n            space_1 = space\n        elif space.SELECT('name').STRING() == target_space_2[1]:\n            space_2 = space\n    if space_1 is None:\n        ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n    elif space_2 is None:\n        ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n        return\n    view = space_1.SELECT('distance', space_2)\n    if view.SELECT('is view clear').BOOL():\n        ROOT.SUCCESS(f'The {target_space_2[0]} is visible from the {target_space_1[0]}.')\n    else:\n        ROOT.ERROR(f'The {target_space_2[0]} is not visible from the {target_space_1[0]}.')",
      "code_diff": "  def Check():\n      target_space_1 = ('nurse station', 'NURSE STATION')\n      target_space_2 = ('blood collection area', 'BLOOD COLLECTION AREA')\n      space_1 = None\n      space_2 = None\n      for space in SELECT('space'):\n          if space.SELECT('name').STRING() == target_space_1[1]:\n              space_1 = space\n          elif space.SELECT('name').STRING() == target_space_2[1]:\n              space_2 = space\n      if space_1 is None:\n          ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n      elif space_2 is None:\n          ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n          return\n      view = space_1.SELECT('distance', space_2)\n      if view.SELECT('is view clear').BOOL():\n          ROOT.SUCCESS(f'The {target_space_2[0]} is visible from the {target_space_1[0]}.')\n      else:\n          ROOT.ERROR(f'The {target_space_2[0]} is not visible from the {target_space_1[0]}.')"
    },
    {
      "sentence_id": 83,
      "sentence": "A blood collection area and an IVD reagent storage room shall be visible from a nurse station.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.968,
        "ted": 0.962,
        "functional": 0.857
      },
      "is_valid": true,
      "processing_time": 0.295,
      "generated_code": "def Check():\n    ROOT.SUCCESS('Basic compliance check completed')",
      "expected_code": "def Check():\n    ROOT.SUCCESS('Basic compliance check completed')",
      "code_diff": "  def Check():\n      ROOT.SUCCESS('Basic compliance check completed')"
    },
    {
      "sentence_id": 84,
      "sentence": "If the area of an emergency department is 100 m² or less, a blood collection area shal be visible from a nurse station.",
      "confidence": 0.74,
      "similarities": {
        "ast": 0.96,
        "ted": 0.989,
        "functional": 0.846
      },
      "is_valid": true,
      "processing_time": 0.317,
      "generated_code": "def Check():\n    check_space = ('emergency department', 'Emergency Department')\n    check_max_area = 100.0\n    target_space_1 = ('nurse station', 'NURSE STATION')\n    target_space_2 = ('blood collection area', 'BLOOD COLLECTION AREA')\n    space_1 = None\n    space_2 = None\n    for check in SELECT('space'):\n        if check.SELECT('name').STRING() == check_space[1]:\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check <= check_max_area:\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space_1[1]:\n                        space_1 = space\n                    elif space.SELECT('name').STRING() == target_space_2[1]:\n                        space_2 = space\n                if space_1 is None:\n                    ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n                elif space_2 is None:\n                    ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n                    return\n                view = space_1.SELECT('distance', space_2)\n                if view.SELECT('is view clear').BOOL():\n                    ROOT.SUCCESS(f'The {target_space_2[0]} is visible from the {target_space_1[0]}.')\n                else:\n                    ROOT.ERROR(f'The {target_space_2[0]} is not visible from the {target_space_1[0]}.')\n            else:\n                ROOT.WARNING(f'The {check_space[0]} is larger than {check_max_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "expected_code": "def Check():\n    check_space = ('emergency department', 'Emergency Department')\n    check_max_area = 100.0\n    target_space_1 = ('nurse station', 'NURSE STATION')\n    target_space_2 = ('blood collection area', 'BLOOD COLLECTION AREA')\n    space_1 = None\n    space_2 = None\n    for check in SELECT('space'):\n        if check.SELECT('name').STRING() == check_space[1]:\n            area_check = check.SELECT('area').UNIT('m2').NUMBER()\n            if area_check <= check_max_area:\n                for space in SELECT('space'):\n                    if space.SELECT('name').STRING() == target_space_1[1]:\n                        space_1 = space\n                    elif space.SELECT('name').STRING() == target_space_2[1]:\n                        space_2 = space\n                if space_1 is None:\n                    ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n                elif space_2 is None:\n                    ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n                    return\n                view = space_1.SELECT('distance', space_2)\n                if view.SELECT('is view clear').BOOL():\n                    ROOT.SUCCESS(f'The {target_space_2[0]} is visible from the {target_space_1[0]}.')\n                else:\n                    ROOT.ERROR(f'The {target_space_2[0]} is not visible from the {target_space_1[0]}.')\n            else:\n                ROOT.WARNING(f'The {check_space[0]} is larger than {check_max_area}m²: {to_str(area_check)}m²')\n            return\ndef to_str(val):\n    return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\"",
      "code_diff": "  def Check():\n      check_space = ('emergency department', 'Emergency Department')\n      check_max_area = 100.0\n      target_space_1 = ('nurse station', 'NURSE STATION')\n      target_space_2 = ('blood collection area', 'BLOOD COLLECTION AREA')\n      space_1 = None\n      space_2 = None\n      for check in SELECT('space'):\n          if check.SELECT('name').STRING() == check_space[1]:\n              area_check = check.SELECT('area').UNIT('m2').NUMBER()\n              if area_check <= check_max_area:\n                  for space in SELECT('space'):\n                      if space.SELECT('name').STRING() == target_space_1[1]:\n                          space_1 = space\n                      elif space.SELECT('name').STRING() == target_space_2[1]:\n                          space_2 = space\n                  if space_1 is None:\n                      ROOT.WARNING(f'{target_space_1[0]}({target_space_1[1]}) NOT FOUND')\n                  elif space_2 is None:\n                      ROOT.WARNING(f'{target_space_2[0]}({target_space_2[1]}) NOT FOUND')\n                      return\n                  view = space_1.SELECT('distance', space_2)\n                  if view.SELECT('is view clear').BOOL():\n                      ROOT.SUCCESS(f'The {target_space_2[0]} is visible from the {target_space_1[0]}.')\n                  else:\n                      ROOT.ERROR(f'The {target_space_2[0]} is not visible from the {target_space_1[0]}.')\n              else:\n                  ROOT.WARNING(f'The {check_space[0]} is larger than {check_max_area}m²: {to_str(area_check)}m²')\n              return\n  def to_str(val):\n      return f\"{val:.4f}\".rstrip('0').rstrip('.') if '.' in f\"{val:.4f}\" else f\"{val:.4f}\""
    }
  ]
}